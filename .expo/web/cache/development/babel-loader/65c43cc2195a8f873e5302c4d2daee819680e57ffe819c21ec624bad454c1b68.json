{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"colors\", \"locations\", \"start\", \"end\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport NativeLinearGradient from './NativeLinearGradient';\nexport class LinearGradient extends React.Component {\n  render() {\n    const _this$props = this.props,\n      {\n        colors,\n        locations,\n        start,\n        end\n      } = _this$props,\n      props = _objectWithoutProperties(_this$props, _excluded);\n    let resolvedLocations = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n    return React.createElement(NativeLinearGradient, _objectSpread(_objectSpread({}, props), {}, {\n      colors: Platform.select({\n        web: colors,\n        default: colors.map(processColor)\n      }),\n      locations: resolvedLocations,\n      startPoint: _normalizePoint(start),\n      endPoint: _normalizePoint(end)\n    }));\n  }\n}\nfunction _normalizePoint(point) {\n  if (!point) {\n    return undefined;\n  }\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n  return Array.isArray(point) ? point : [point.x, point.y];\n}","map":{"version":3,"names":["React","Platform","processColor","NativeLinearGradient","LinearGradient","Component","render","_this$props","props","colors","locations","start","end","_objectWithoutProperties","_excluded","resolvedLocations","length","console","warn","slice","createElement","_objectSpread","select","web","default","map","startPoint","_normalizePoint","endPoint","point","undefined","Array","isArray","x","y"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\expo-linear-gradient\\src\\LinearGradient.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, processColor, ViewProps } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\n// @needsAudit\n/**\n * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n * at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging\n * from `0` to `1`, inclusive.\n */\nexport type LinearGradientPoint =\n  | {\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      x: number;\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      y: number;\n    }\n  | NativeLinearGradientPoint;\n\n// @needsAudit\nexport type LinearGradientProps = ViewProps & {\n  /**\n   * An array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   */\n  colors: string[];\n  /**\n   * An array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   * If not specified, the colors will be distributed evenly across the gradient.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * > The color-stop locations must be ascending from least to greatest.\n   * @default []\n   */\n  locations?: number[] | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   * @default { x: 0.5, y: 0.0 }\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   * @default { x: 0.5, y: 1.0 }\n   */\n  end?: LinearGradientPoint | null;\n};\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport class LinearGradient extends React.Component<LinearGradientProps> {\n  render() {\n    const { colors, locations, start, end, ...props } = this.props;\n    let resolvedLocations = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return (\n      <NativeLinearGradient\n        {...props}\n        colors={Platform.select({\n          web: colors as any,\n          default: colors.map(processColor),\n        })}\n        locations={resolvedLocations}\n        startPoint={_normalizePoint(start)}\n        endPoint={_normalizePoint(end)}\n      />\n    );\n  }\n}\n\nfunction _normalizePoint(\n  point: LinearGradientPoint | null | undefined\n): NativeLinearGradientPoint | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,YAAA;AAG/B,OAAOC,oBAAoB,MAAM,wBAAwB;AA8DzD,OAAM,MAAOC,cAAe,SAAQJ,KAAK,CAACK,SAA8B;EACtEC,MAAMA,CAAA;IACJ,MAAAC,WAAA,GAAoD,IAAI,CAACC,KAAK;MAAxD;QAAEC,MAAM;QAAEC,SAAS;QAAEC,KAAK;QAAEC;MAAa,CAAE,GAAAL,WAAA;MAAPC,KAAK,GAAAK,wBAAA,CAAAN,WAAA,EAAAO,SAAA;IAC/C,IAAIC,iBAAiB,GAAGL,SAAS;IACjC,IAAIA,SAAS,IAAID,MAAM,CAACO,MAAM,KAAKN,SAAS,CAACM,MAAM,EAAE;MACnDC,OAAO,CAACC,IAAI,CAAC,+EAA+E,CAAC;MAC7FH,iBAAiB,GAAGL,SAAS,CAACS,KAAK,CAAC,CAAC,EAAEV,MAAM,CAACO,MAAM,CAAC;;IAGvD,OACEhB,KAAA,CAAAoB,aAAA,CAACjB,oBAAoB,EAAAkB,aAAA,CAAAA,aAAA,KACfb,KAAK;MACTC,MAAM,EAAER,QAAQ,CAACqB,MAAM,CAAC;QACtBC,GAAG,EAAEd,MAAa;QAClBe,OAAO,EAAEf,MAAM,CAACgB,GAAG,CAACvB,YAAY;OACjC,CAAC;MACFQ,SAAS,EAAEK,iBAAiB;MAC5BW,UAAU,EAAEC,eAAe,CAAChB,KAAK,CAAC;MAClCiB,QAAQ,EAAED,eAAe,CAACf,GAAG;IAAC,GAC9B;EAEN;;AAGF,SAASe,eAAeA,CACtBE,KAA6C;EAE7C,IAAI,CAACA,KAAK,EAAE;IACV,OAAOC,SAAS;;EAGlB,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACb,MAAM,KAAK,CAAC,EAAE;IAC9CC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC;IAC5F,OAAOY,SAAS;;EAGlB,OAAOC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}