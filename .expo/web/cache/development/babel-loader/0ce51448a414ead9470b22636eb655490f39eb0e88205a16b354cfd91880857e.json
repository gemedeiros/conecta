{"ast":null,"code":"import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\nexport default function useIsFocused() {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n  const valueToReturn = navigation.isFocused();\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () => setIsFocused(true));\n    const unsubscribeBlur = navigation.addListener('blur', () => setIsFocused(false));\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"names":["React","useState","useNavigation","useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport useNavigation from './useNavigation';\r\n\r\n/**\r\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\r\n * This can be used if a component needs to render something based on the focus state.\r\n */\r\nexport default function useIsFocused(): boolean {\r\n  const navigation = useNavigation();\r\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\r\n\r\n  const valueToReturn = navigation.isFocused();\r\n\r\n  if (isFocused !== valueToReturn) {\r\n    // If the value has changed since the last render, we need to update it.\r\n    // This could happen if we missed an update from the event listeners during re-render.\r\n    // React will process this update immediately, so the old subscription value won't be committed.\r\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\r\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\r\n    setIsFocused(valueToReturn);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribeFocus = navigation.addListener('focus', () =>\r\n      setIsFocused(true)\r\n    );\r\n\r\n    const unsubscribeBlur = navigation.addListener('blur', () =>\r\n      setIsFocused(false)\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeFocus();\r\n      unsubscribeBlur();\r\n    };\r\n  }, [navigation]);\r\n\r\n  React.useDebugValue(valueToReturn);\r\n\r\n  return valueToReturn;\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,aAAa,MAAM,iBAAiB;AAM3C,eAAe,SAASC,YAAYA,CAAA,EAAY;EAC9C,MAAMC,UAAU,GAAGF,aAAa,EAAE;EAClC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAACG,UAAU,CAACC,SAAS,CAAC;EAEhE,MAAME,aAAa,GAAGH,UAAU,CAACC,SAAS,EAAE;EAE5C,IAAIA,SAAS,KAAKE,aAAa,EAAE;IAM/BD,YAAY,CAACC,aAAa,CAAC;EAC7B;EAEAP,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpB,MAAMC,gBAAgB,GAAGL,UAAU,CAACM,WAAW,CAAC,OAAO,EAAE,MACvDJ,YAAY,CAAC,IAAI,CAAC,CACnB;IAED,MAAMK,eAAe,GAAGP,UAAU,CAACM,WAAW,CAAC,MAAM,EAAE,MACrDJ,YAAY,CAAC,KAAK,CAAC,CACpB;IAED,OAAO,MAAM;MACXG,gBAAgB,EAAE;MAClBE,eAAe,EAAE;IACnB,CAAC;EACH,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;EAEhBJ,KAAK,CAACY,aAAa,CAACL,aAAa,CAAC;EAElC,OAAOA,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}