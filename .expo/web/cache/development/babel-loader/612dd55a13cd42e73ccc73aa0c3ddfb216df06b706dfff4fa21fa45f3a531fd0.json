{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window');\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  return React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n    return React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","Platform","StyleSheet","View","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","width","height","get","initialMetrics","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","_ref","children","style","createElement","Consumer","styles","container","create","flex"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\elements\\src\\SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Dimensions,\r\n  Platform,\r\n  StyleProp,\r\n  StyleSheet,\r\n  View,\r\n  ViewStyle,\r\n} from 'react-native';\r\nimport {\r\n  initialWindowMetrics,\r\n  SafeAreaInsetsContext,\r\n  SafeAreaProvider,\r\n} from 'react-native-safe-area-context';\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\nconst { width = 0, height = 0 } = Dimensions.get('window');\r\n\r\n// To support SSR on web, we need to have empty insets for initial values\r\n// Otherwise there can be mismatch between SSR and client output\r\n// We also need to specify empty values to support tests environments\r\nconst initialMetrics =\r\n  Platform.OS === 'web' || initialWindowMetrics == null\r\n    ? {\r\n        frame: { x: 0, y: 0, width, height },\r\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\r\n      }\r\n    : initialWindowMetrics;\r\n\r\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\r\n  return (\r\n    <SafeAreaInsetsContext.Consumer>\r\n      {(insets) => {\r\n        if (insets) {\r\n          // If we already have insets, don't wrap the stack in another safe area provider\r\n          // This avoids an issue with updates at the cost of potentially incorrect values\r\n          // https://github.com/react-navigation/react-navigation/issues/174\r\n          return <View style={[styles.container, style]}>{children}</View>;\r\n        }\r\n\r\n        return (\r\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\r\n            {children}\r\n          </SafeAreaProvider>\r\n        );\r\n      }}\r\n    </SafeAreaInsetsContext.Consumer>\r\n  );\r\n}\r\n\r\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAS9B,SACEC,oBAAoB,EACpBC,qBAAqB,EACrBC,gBAAgB,QACX,gCAAgC;AAOvC,MAAM;EAAEC,KAAK,GAAG,CAAC;EAAEC,MAAM,GAAG;AAAE,CAAC,GAAGR,UAAU,CAACS,GAAG,CAAC,QAAQ,CAAC;AAK1D,MAAMC,cAAc,GAClBT,QAAQ,CAACU,EAAE,KAAK,KAAK,IAAIP,oBAAoB,IAAI,IAAI,GACjD;EACEQ,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEP,KAAK;IAAEC;EAAO,CAAC;EACpCO,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AACjD,CAAC,GACDf,oBAAoB;AAE1B,eAAe,SAASgB,sBAAsBA,CAAAC,IAAA,EAA6B;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAAF,IAAA;EACvE,OACEtB,KAAA,CAAAyB,aAAA,CAACnB,qBAAqB,CAACoB,QAAQ,QAC3BV,MAAM,IAAK;IACX,IAAIA,MAAM,EAAE;MAIV,OAAOhB,KAAA,CAAAyB,aAAA,CAACrB,IAAI;QAACoB,KAAK,EAAE,CAACG,MAAM,CAACC,SAAS,EAAEJ,KAAK;MAAE,GAAED,QAAQ,CAAQ;IAClE;IAEA,OACEvB,KAAA,CAAAyB,aAAA,CAAClB,gBAAgB;MAACI,cAAc,EAAEA,cAAe;MAACa,KAAK,EAAEA;IAAM,GAC5DD,QAAQ,CACQ;EAEvB,CAAC,CAC8B;AAErC;AAEAF,sBAAsB,CAACV,cAAc,GAAGA,cAAc;AAEtD,MAAMgB,MAAM,GAAGxB,UAAU,CAAC0B,MAAM,CAAC;EAC/BD,SAAS,EAAE;IACTE,IAAI,EAAE;EACR;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}