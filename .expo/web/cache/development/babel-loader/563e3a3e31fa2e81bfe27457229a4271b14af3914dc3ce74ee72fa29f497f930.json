{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\nexport default function useOnAction(_ref) {\n  let {\n    router,\n    getState,\n    setState,\n    key,\n    actionListeners,\n    beforeRemoveListeners,\n    routerConfigOptions,\n    emitter\n  } = _ref;\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction\n  } = React.useContext(NavigationBuilderContext);\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback(function (action) {\n    let visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    const state = getState();\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n        if (state !== result) {\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n          if (isPrevented) {\n            return true;\n          }\n          setState(result);\n        }\n        if (onRouteFocusParent !== undefined) {\n          const shouldFocus = router.shouldActionChangeFocus(action);\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n        return true;\n      }\n    }\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","_ref","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","arguments","length","undefined","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","shouldFocus","shouldActionChangeFocus","i","listener"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\useOnAction.tsx"],"sourcesContent":["import type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  PartialState,\r\n  Router,\r\n  RouterConfigOptions,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport NavigationBuilderContext, {\r\n  ChildActionListener,\r\n  ChildBeforeRemoveListener,\r\n} from './NavigationBuilderContext';\r\nimport type { EventMapCore } from './types';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\r\n\r\ntype Options = {\r\n  router: Router<NavigationState, NavigationAction>;\r\n  key?: string;\r\n  getState: () => NavigationState;\r\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\r\n  actionListeners: ChildActionListener[];\r\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\r\n  routerConfigOptions: RouterConfigOptions;\r\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\r\n};\r\n\r\n/**\r\n * Hook to handle actions for a navigator, including state updates and bubbling.\r\n *\r\n * Bubbling an action is achieved in 2 ways:\r\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\r\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\r\n *\r\n * When the action handler handles as action, it returns `true`, otherwise `false`.\r\n */\r\nexport default function useOnAction({\r\n  router,\r\n  getState,\r\n  setState,\r\n  key,\r\n  actionListeners,\r\n  beforeRemoveListeners,\r\n  routerConfigOptions,\r\n  emitter,\r\n}: Options) {\r\n  const {\r\n    onAction: onActionParent,\r\n    onRouteFocus: onRouteFocusParent,\r\n    addListener: addListenerParent,\r\n    onDispatchAction,\r\n  } = React.useContext(NavigationBuilderContext);\r\n\r\n  const routerConfigOptionsRef =\r\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\r\n\r\n  React.useEffect(() => {\r\n    routerConfigOptionsRef.current = routerConfigOptions;\r\n  });\r\n\r\n  const onAction = React.useCallback(\r\n    (\r\n      action: NavigationAction,\r\n      visitedNavigators: Set<string> = new Set<string>()\r\n    ) => {\r\n      const state = getState();\r\n\r\n      // Since actions can bubble both up and down, they could come to the same navigator again\r\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\r\n      if (visitedNavigators.has(state.key)) {\r\n        return false;\r\n      }\r\n\r\n      visitedNavigators.add(state.key);\r\n\r\n      if (typeof action.target !== 'string' || action.target === state.key) {\r\n        let result = router.getStateForAction(\r\n          state,\r\n          action,\r\n          routerConfigOptionsRef.current\r\n        );\r\n\r\n        // If a target is specified and set to current navigator, the action shouldn't bubble\r\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\r\n        result =\r\n          result === null && action.target === state.key ? state : result;\r\n\r\n        if (result !== null) {\r\n          onDispatchAction(action, state === result);\r\n\r\n          if (state !== result) {\r\n            const isPrevented = shouldPreventRemove(\r\n              emitter,\r\n              beforeRemoveListeners,\r\n              state.routes,\r\n              result.routes,\r\n              action\r\n            );\r\n\r\n            if (isPrevented) {\r\n              return true;\r\n            }\r\n\r\n            setState(result);\r\n          }\r\n\r\n          if (onRouteFocusParent !== undefined) {\r\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\r\n            // This means we need to focus all of the parent navigators of this navigator as well\r\n            const shouldFocus = router.shouldActionChangeFocus(action);\r\n\r\n            if (shouldFocus && key !== undefined) {\r\n              onRouteFocusParent(key);\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      }\r\n\r\n      if (onActionParent !== undefined) {\r\n        // Bubble action to the parent if the current navigator didn't handle it\r\n        if (onActionParent(action, visitedNavigators)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\r\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\r\n        const listener = actionListeners[i];\r\n\r\n        if (listener(action, visitedNavigators)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n    [\r\n      actionListeners,\r\n      beforeRemoveListeners,\r\n      emitter,\r\n      getState,\r\n      key,\r\n      onActionParent,\r\n      onDispatchAction,\r\n      onRouteFocusParent,\r\n      router,\r\n      setState,\r\n    ]\r\n  );\r\n\r\n  useOnPreventRemove({\r\n    getState,\r\n    emitter,\r\n    beforeRemoveListeners,\r\n  });\r\n\r\n  React.useEffect(\r\n    () => addListenerParent?.('action', onAction),\r\n    [addListenerParent, onAction]\r\n  );\r\n\r\n  return onAction;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}