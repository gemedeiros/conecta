{"ast":null,"code":"'use strict';\n\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\nvar getElementRole = element => element.getAttribute('role');\nvar getElementType = element => element.tagName.toLowerCase();\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isButtonRole = element => getElementRole(element) === 'button';\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\nvar isValidKeyPress = event => {\n  var key = event.key,\n    target = event.target;\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  var isButtonish = getElementType(target) === 'button' || isButtonRole(target);\n  return key === 'Enter' || isSpacebar && isButtonish;\n};\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450;\nvar DEFAULT_PRESS_DELAY_MS = 50;\nexport default class PressResponder {\n  constructor(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n  configure(config) {\n    this._config = config;\n  }\n  reset() {\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n  }\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n  _createEventHandlers() {\n    var start = (event, shouldDelay) => {\n      event.persist();\n      this._cancelPressOutDelayTimeout();\n      this._longPressDispatched = false;\n      this._selectionTerminated = false;\n      this._touchState = NOT_RESPONDER;\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n      this._receiveSignal(RESPONDER_GRANT, event);\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n      if (shouldDelay !== false && delayPressStart > 0) {\n        this._pressDelayTimeout = setTimeout(() => {\n          this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        this._receiveSignal(DELAY, event);\n      }\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      this._longPressDelayTimeout = setTimeout(() => {\n        this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n    var end = event => {\n      this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n    var keyupHandler = event => {\n      var onPress = this._config.onPress;\n      var target = event.target;\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = getElementType(target);\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n    return {\n      onStartShouldSetResponder: event => {\n        var disabled = this._config.disabled;\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n        if (disabled == null) {\n          return true;\n        }\n        return !disabled;\n      },\n      onKeyDown: event => {\n        var disabled = this._config.disabled;\n        var key = event.key,\n          target = event.target;\n        if (!disabled && isValidKeyPress(event)) {\n          if (this._touchState === NOT_RESPONDER) {\n            start(event, false);\n            document.addEventListener('keyup', keyupHandler);\n          }\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n          var role = getElementRole(target);\n          var isButtonLikeRole = role === 'button' || role === 'menuitem';\n          if (isSpacebarKey && isButtonLikeRole && getElementType(target) !== 'button') {\n            event.preventDefault();\n          }\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: event => start(event),\n      onResponderMove: event => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n        var touch = getTouchFromResponderEvent(event);\n        if (this._touchActivatePosition != null) {\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: event => end(event),\n      onResponderTerminate: event => {\n        if (event.nativeEvent.type === 'selectionchange') {\n          this._selectionTerminated = true;\n        }\n        this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: event => {\n        var _this$_config = this._config,\n          cancelable = _this$_config.cancelable,\n          disabled = _this$_config.disabled,\n          onLongPress = _this$_config.onLongPress;\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n        if (cancelable == null) {\n          return true;\n        }\n        return cancelable;\n      },\n      onClick: event => {\n        var _this$_config2 = this._config,\n          disabled = _this$_config2.disabled,\n          onPress = _this$_config2.onPress;\n        if (!disabled) {\n          event.stopPropagation();\n          if (this._longPressDispatched || this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      onContextMenu: event => {\n        var _this$_config3 = this._config,\n          disabled = _this$_config3.disabled,\n          onLongPress = _this$_config3.onLongPress;\n        if (!disabled) {\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      setTimeout(() => {\n        this._isPointerTouch = false;\n      }, 0);\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress;\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n        _onLongPress = _this$_config4.onLongPress,\n        onPress = _this$_config4.onPress;\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n        if (!isPressCanceledByLongPress) {\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n    this._cancelPressDelayTimeout();\n  }\n  _activate(event) {\n    var _this$_config5 = this._config,\n      onPressChange = _this$_config5.onPressChange,\n      onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  }\n  _deactivate(event) {\n    var _this$_config6 = this._config,\n      onPressChange = _this$_config6.onPressChange,\n      onPressEnd = _this$_config6.onPressEnd;\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(() => {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  }\n  _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  }\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n    changedTouches = _event$nativeEvent.changedTouches,\n    touches = _event$nativeEvent.touches;\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n}","map":{"version":3,"names":["DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","Object","freeze","getElementRole","element","getAttribute","getElementType","tagName","toLowerCase","isActiveSignal","signal","isButtonRole","isPressStartSignal","isTerminalSignal","isValidKeyPress","event","key","target","isSpacebar","isButtonish","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","PressResponder","constructor","config","_eventHandlers","_isPointerTouch","_longPressDelayTimeout","_longPressDispatched","_pressDelayTimeout","_pressOutDelayTimeout","_touchState","configure","_config","reset","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","getEventHandlers","_createEventHandlers","start","shouldDelay","persist","_selectionTerminated","nativeEvent","type","_receiveSignal","delayPressStart","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","end","keyupHandler","onPress","document","removeEventListener","role","elementType","isNativeInteractiveElement","onStartShouldSetResponder","disabled","currentTarget","stopPropagation","onKeyDown","addEventListener","isSpacebarKey","isButtonLikeRole","preventDefault","onResponderGrant","onResponderMove","onPressMove","touch","getTouchFromResponderEvent","_touchActivatePosition","deltaX","pageX","deltaY","pageY","Math","hypot","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","_this$_config","cancelable","onLongPress","onClick","_this$_config2","altKey","onContextMenu","_this$_config3","defaultPrevented","prevState","nextState","console","error","_performTransitionSideEffects","isPrevActive","isNextActive","_activate","_deactivate","_this$_config4","_onLongPress","isPressCanceledByLongPress","_this$_config5","onPressChange","onPressStart","_this$_config6","onPressEnd","delayPressEnd","clearTimeout","delay","min","fallback","max","_event$nativeEvent","changedTouches","touches","length"],"sources":["C:/Users/thiago.attico/source/repos/conecta/node_modules/react-native-web/dist/modules/usePressEvents/PressResponder.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nvar DELAY = 'DELAY';\r\nvar ERROR = 'ERROR';\r\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\r\nvar NOT_RESPONDER = 'NOT_RESPONDER';\r\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\r\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\r\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\r\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\r\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\r\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\r\nvar Transitions = Object.freeze({\r\n  NOT_RESPONDER: {\r\n    DELAY: ERROR,\r\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\r\n    RESPONDER_RELEASE: ERROR,\r\n    RESPONDER_TERMINATED: ERROR,\r\n    LONG_PRESS_DETECTED: ERROR\r\n  },\r\n  RESPONDER_INACTIVE_PRESS_START: {\r\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\r\n    RESPONDER_GRANT: ERROR,\r\n    RESPONDER_RELEASE: NOT_RESPONDER,\r\n    RESPONDER_TERMINATED: NOT_RESPONDER,\r\n    LONG_PRESS_DETECTED: ERROR\r\n  },\r\n  RESPONDER_ACTIVE_PRESS_START: {\r\n    DELAY: ERROR,\r\n    RESPONDER_GRANT: ERROR,\r\n    RESPONDER_RELEASE: NOT_RESPONDER,\r\n    RESPONDER_TERMINATED: NOT_RESPONDER,\r\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\r\n  },\r\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\r\n    DELAY: ERROR,\r\n    RESPONDER_GRANT: ERROR,\r\n    RESPONDER_RELEASE: NOT_RESPONDER,\r\n    RESPONDER_TERMINATED: NOT_RESPONDER,\r\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\r\n  },\r\n  ERROR: {\r\n    DELAY: NOT_RESPONDER,\r\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\r\n    RESPONDER_RELEASE: NOT_RESPONDER,\r\n    RESPONDER_TERMINATED: NOT_RESPONDER,\r\n    LONG_PRESS_DETECTED: NOT_RESPONDER\r\n  }\r\n});\r\nvar getElementRole = element => element.getAttribute('role');\r\nvar getElementType = element => element.tagName.toLowerCase();\r\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\r\nvar isButtonRole = element => getElementRole(element) === 'button';\r\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\r\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\r\nvar isValidKeyPress = event => {\r\n  var key = event.key,\r\n    target = event.target;\r\n  var isSpacebar = key === ' ' || key === 'Spacebar';\r\n  var isButtonish = getElementType(target) === 'button' || isButtonRole(target);\r\n  return key === 'Enter' || isSpacebar && isButtonish;\r\n};\r\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\r\nvar DEFAULT_PRESS_DELAY_MS = 50;\r\n\r\n/**\r\n * =========================== PressResponder Tutorial ===========================\r\n *\r\n * The `PressResponder` class helps you create press interactions by analyzing the\r\n * geometry of elements and observing when another responder (e.g. ScrollView)\r\n * has stolen the touch lock. It offers hooks for your component to provide\r\n * interaction feedback to the user:\r\n *\r\n * - When a press has activated (e.g. highlight an element)\r\n * - When a press has deactivated (e.g. un-highlight an element)\r\n * - When a press sould trigger an action, meaning it activated and deactivated\r\n *   while within the geometry of the element without the lock being stolen.\r\n *\r\n * A high quality interaction isn't as simple as you might think. There should\r\n * be a slight delay before activation. Moving your finger beyond an element's\r\n * bounds should trigger deactivation, but moving the same finger back within an\r\n * element's bounds should trigger reactivation.\r\n *\r\n * In order to use `PressResponder`, do the following:\r\n *\r\n *     const pressResponder = new PressResponder(config);\r\n *\r\n * 2. Choose the rendered component who should collect the press events. On that\r\n *    element, spread `pressability.getEventHandlers()` into its props.\r\n *\r\n *    return (\r\n *      <View {...this.state.pressResponder.getEventHandlers()} />\r\n *    );\r\n *\r\n * 3. Reset `PressResponder` when your component unmounts.\r\n *\r\n *    componentWillUnmount() {\r\n *      this.state.pressResponder.reset();\r\n *    }\r\n *\r\n * ==================== Implementation Details ====================\r\n *\r\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\r\n * is an abstract box that is extended beyond the `HitRect`.\r\n *\r\n * # Geometry\r\n *\r\n *  ┌────────────────────────┐\r\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\r\n *  │  │  ┌────────────┐  │  │\r\n *  │  │  │ VisualRect │  │  │\r\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\r\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\r\n *  │  └──────────────────┘  │\r\n *  │       Out Region   o   │\r\n *  └────────────────────│───┘\r\n *                       └────── When the press is released outside the `HitRect`,\r\n *                               the responder is NOT eligible for a \"press\".\r\n *\r\n * # State Machine\r\n *\r\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\r\n * │ NOT_RESPONDER │\r\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\r\n *     │\r\n *     │ RESPONDER_GRANT (HitRect)\r\n *     │\r\n *     ▼\r\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\r\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\r\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\r\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\r\n *\r\n * T + DELAY => LONG_PRESS_DELAY + DELAY\r\n *\r\n * Not drawn are the side effects of each transition. The most important side\r\n * effect is the invocation of `onLongPress`. Only when the browser produces a\r\n * `click` event is `onPress` invoked.\r\n */\r\nexport default class PressResponder {\r\n  constructor(config) {\r\n    this._eventHandlers = null;\r\n    this._isPointerTouch = false;\r\n    this._longPressDelayTimeout = null;\r\n    this._longPressDispatched = false;\r\n    this._pressDelayTimeout = null;\r\n    this._pressOutDelayTimeout = null;\r\n    this._touchState = NOT_RESPONDER;\r\n    this.configure(config);\r\n  }\r\n  configure(config) {\r\n    this._config = config;\r\n  }\r\n\r\n  /**\r\n   * Resets any pending timers. This should be called on unmount.\r\n   */\r\n  reset() {\r\n    this._cancelLongPressDelayTimeout();\r\n    this._cancelPressDelayTimeout();\r\n    this._cancelPressOutDelayTimeout();\r\n  }\r\n\r\n  /**\r\n   * Returns a set of props to spread into the interactive element.\r\n   */\r\n  getEventHandlers() {\r\n    if (this._eventHandlers == null) {\r\n      this._eventHandlers = this._createEventHandlers();\r\n    }\r\n    return this._eventHandlers;\r\n  }\r\n  _createEventHandlers() {\r\n    var start = (event, shouldDelay) => {\r\n      event.persist();\r\n      this._cancelPressOutDelayTimeout();\r\n      this._longPressDispatched = false;\r\n      this._selectionTerminated = false;\r\n      this._touchState = NOT_RESPONDER;\r\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\r\n      this._receiveSignal(RESPONDER_GRANT, event);\r\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\r\n      if (shouldDelay !== false && delayPressStart > 0) {\r\n        this._pressDelayTimeout = setTimeout(() => {\r\n          this._receiveSignal(DELAY, event);\r\n        }, delayPressStart);\r\n      } else {\r\n        this._receiveSignal(DELAY, event);\r\n      }\r\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\r\n      this._longPressDelayTimeout = setTimeout(() => {\r\n        this._handleLongPress(event);\r\n      }, delayLongPress + delayPressStart);\r\n    };\r\n    var end = event => {\r\n      this._receiveSignal(RESPONDER_RELEASE, event);\r\n    };\r\n    var keyupHandler = event => {\r\n      var onPress = this._config.onPress;\r\n      var target = event.target;\r\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\r\n        end(event);\r\n        document.removeEventListener('keyup', keyupHandler);\r\n        var role = target.getAttribute('role');\r\n        var elementType = getElementType(target);\r\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\r\n        if (onPress != null && !isNativeInteractiveElement) {\r\n          onPress(event);\r\n        }\r\n      }\r\n    };\r\n    return {\r\n      onStartShouldSetResponder: event => {\r\n        var disabled = this._config.disabled;\r\n        if (disabled && isButtonRole(event.currentTarget)) {\r\n          event.stopPropagation();\r\n        }\r\n        if (disabled == null) {\r\n          return true;\r\n        }\r\n        return !disabled;\r\n      },\r\n      onKeyDown: event => {\r\n        var disabled = this._config.disabled;\r\n        var key = event.key,\r\n          target = event.target;\r\n        if (!disabled && isValidKeyPress(event)) {\r\n          if (this._touchState === NOT_RESPONDER) {\r\n            start(event, false);\r\n            // Listen to 'keyup' on document to account for situations where\r\n            // focus is moved to another element during 'keydown'.\r\n            document.addEventListener('keyup', keyupHandler);\r\n          }\r\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\r\n          var role = getElementRole(target);\r\n          var isButtonLikeRole = role === 'button' || role === 'menuitem';\r\n          if (isSpacebarKey && isButtonLikeRole && getElementType(target) !== 'button') {\r\n            // Prevent spacebar scrolling the window if using non-native button\r\n            event.preventDefault();\r\n          }\r\n          event.stopPropagation();\r\n        }\r\n      },\r\n      onResponderGrant: event => start(event),\r\n      onResponderMove: event => {\r\n        if (this._config.onPressMove != null) {\r\n          this._config.onPressMove(event);\r\n        }\r\n        var touch = getTouchFromResponderEvent(event);\r\n        if (this._touchActivatePosition != null) {\r\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\r\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\r\n          if (Math.hypot(deltaX, deltaY) > 10) {\r\n            this._cancelLongPressDelayTimeout();\r\n          }\r\n        }\r\n      },\r\n      onResponderRelease: event => end(event),\r\n      onResponderTerminate: event => {\r\n        if (event.nativeEvent.type === 'selectionchange') {\r\n          this._selectionTerminated = true;\r\n        }\r\n        this._receiveSignal(RESPONDER_TERMINATED, event);\r\n      },\r\n      onResponderTerminationRequest: event => {\r\n        var _this$_config = this._config,\r\n          cancelable = _this$_config.cancelable,\r\n          disabled = _this$_config.disabled,\r\n          onLongPress = _this$_config.onLongPress;\r\n        // If `onLongPress` is provided, don't terminate on `contextmenu` as default\r\n        // behavior will be prevented for non-mouse pointers.\r\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\r\n          return false;\r\n        }\r\n        if (cancelable == null) {\r\n          return true;\r\n        }\r\n        return cancelable;\r\n      },\r\n      // NOTE: this diverges from react-native in 3 significant ways:\r\n      // * The `onPress` callback is not connected to the responder system (the native\r\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\r\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\r\n      //   `onPress{Start,End}` being called first.\r\n      // * The `onPress` callback is only be called on the first ancestor of the native\r\n      //   `click` target that is using the PressResponder.\r\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\r\n      onClick: event => {\r\n        var _this$_config2 = this._config,\r\n          disabled = _this$_config2.disabled,\r\n          onPress = _this$_config2.onPress;\r\n        if (!disabled) {\r\n          // If long press dispatched, cancel default click behavior.\r\n          // If the responder terminated because text was selected during the gesture,\r\n          // cancel the default click behavior.\r\n          event.stopPropagation();\r\n          if (this._longPressDispatched || this._selectionTerminated) {\r\n            event.preventDefault();\r\n          } else if (onPress != null && event.altKey === false) {\r\n            onPress(event);\r\n          }\r\n        } else {\r\n          if (isButtonRole(event.currentTarget)) {\r\n            event.stopPropagation();\r\n          }\r\n        }\r\n      },\r\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\r\n      // default context menu from opening.\r\n      onContextMenu: event => {\r\n        var _this$_config3 = this._config,\r\n          disabled = _this$_config3.disabled,\r\n          onLongPress = _this$_config3.onLongPress;\r\n        if (!disabled) {\r\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n          }\r\n        } else {\r\n          if (isButtonRole(event.currentTarget)) {\r\n            event.stopPropagation();\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Receives a state machine signal, performs side effects of the transition\r\n   * and stores the new state. Validates the transition as well.\r\n   */\r\n  _receiveSignal(signal, event) {\r\n    var prevState = this._touchState;\r\n    var nextState = null;\r\n    if (Transitions[prevState] != null) {\r\n      nextState = Transitions[prevState][signal];\r\n    }\r\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\r\n      return;\r\n    }\r\n    if (nextState == null || nextState === ERROR) {\r\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\r\n    } else if (prevState !== nextState) {\r\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\r\n      this._touchState = nextState;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a transition between touchable states and identify any activations\r\n   * or deactivations (and callback invocations).\r\n   */\r\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\r\n    if (isTerminalSignal(signal)) {\r\n      // Pressable suppression of contextmenu on windows.\r\n      // On Windows, the contextmenu is displayed after pointerup.\r\n      // https://github.com/necolas/react-native-web/issues/2296\r\n      setTimeout(() => {\r\n        this._isPointerTouch = false;\r\n      }, 0);\r\n      this._touchActivatePosition = null;\r\n      this._cancelLongPressDelayTimeout();\r\n    }\r\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\r\n      var onLongPress = this._config.onLongPress;\r\n      // Long press is not supported for keyboards because 'click' can be dispatched\r\n      // immediately (and multiple times) after 'keydown'.\r\n      if (onLongPress != null && event.nativeEvent.key == null) {\r\n        onLongPress(event);\r\n        this._longPressDispatched = true;\r\n      }\r\n    }\r\n    var isPrevActive = isActiveSignal(prevState);\r\n    var isNextActive = isActiveSignal(nextState);\r\n    if (!isPrevActive && isNextActive) {\r\n      this._activate(event);\r\n    } else if (isPrevActive && !isNextActive) {\r\n      this._deactivate(event);\r\n    }\r\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\r\n      var _this$_config4 = this._config,\r\n        _onLongPress = _this$_config4.onLongPress,\r\n        onPress = _this$_config4.onPress;\r\n      if (onPress != null) {\r\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\r\n        if (!isPressCanceledByLongPress) {\r\n          // If we never activated (due to delays), activate and deactivate now.\r\n          if (!isNextActive && !isPrevActive) {\r\n            this._activate(event);\r\n            this._deactivate(event);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this._cancelPressDelayTimeout();\r\n  }\r\n  _activate(event) {\r\n    var _this$_config5 = this._config,\r\n      onPressChange = _this$_config5.onPressChange,\r\n      onPressStart = _this$_config5.onPressStart;\r\n    var touch = getTouchFromResponderEvent(event);\r\n    this._touchActivatePosition = {\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY\r\n    };\r\n    if (onPressStart != null) {\r\n      onPressStart(event);\r\n    }\r\n    if (onPressChange != null) {\r\n      onPressChange(true);\r\n    }\r\n  }\r\n  _deactivate(event) {\r\n    var _this$_config6 = this._config,\r\n      onPressChange = _this$_config6.onPressChange,\r\n      onPressEnd = _this$_config6.onPressEnd;\r\n    function end() {\r\n      if (onPressEnd != null) {\r\n        onPressEnd(event);\r\n      }\r\n      if (onPressChange != null) {\r\n        onPressChange(false);\r\n      }\r\n    }\r\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\r\n    if (delayPressEnd > 0) {\r\n      this._pressOutDelayTimeout = setTimeout(() => {\r\n        end();\r\n      }, delayPressEnd);\r\n    } else {\r\n      end();\r\n    }\r\n  }\r\n  _handleLongPress(event) {\r\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\r\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\r\n    }\r\n  }\r\n  _cancelLongPressDelayTimeout() {\r\n    if (this._longPressDelayTimeout != null) {\r\n      clearTimeout(this._longPressDelayTimeout);\r\n      this._longPressDelayTimeout = null;\r\n    }\r\n  }\r\n  _cancelPressDelayTimeout() {\r\n    if (this._pressDelayTimeout != null) {\r\n      clearTimeout(this._pressDelayTimeout);\r\n      this._pressDelayTimeout = null;\r\n    }\r\n  }\r\n  _cancelPressOutDelayTimeout() {\r\n    if (this._pressOutDelayTimeout != null) {\r\n      clearTimeout(this._pressOutDelayTimeout);\r\n      this._pressOutDelayTimeout = null;\r\n    }\r\n  }\r\n}\r\nfunction normalizeDelay(delay, min, fallback) {\r\n  if (min === void 0) {\r\n    min = 0;\r\n  }\r\n  if (fallback === void 0) {\r\n    fallback = 0;\r\n  }\r\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\r\n}\r\nfunction getTouchFromResponderEvent(event) {\r\n  var _event$nativeEvent = event.nativeEvent,\r\n    changedTouches = _event$nativeEvent.changedTouches,\r\n    touches = _event$nativeEvent.touches;\r\n  if (touches != null && touches.length > 0) {\r\n    return touches[0];\r\n  }\r\n  if (changedTouches != null && changedTouches.length > 0) {\r\n    return changedTouches[0];\r\n  }\r\n  return event.nativeEvent;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}