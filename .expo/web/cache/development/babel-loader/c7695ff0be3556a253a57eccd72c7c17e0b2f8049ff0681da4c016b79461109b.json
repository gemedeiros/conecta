{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  const router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => _objectSpread(_objectSpread({}, route), {}, {\n        key: route.key || `${route.name}-${nanoid()}`,\n        params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${nanoid()}`,\n                name,\n                params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n              } : route)\n            });\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }];\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes\n            });\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: routes.length - 1,\n                routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            let index = -1;\n            const getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [...state.routes, {\n                key: action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }];\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes,\n                index: routes.length - 1\n              });\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[route.name]), route.params), action.payload.params) : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? _objectSpread(_objectSpread({}, route), {}, {\n                path: action.payload.path ?? route.path,\n                params\n              }) : state.routes[index]]\n            });\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","arguments","length","undefined","popToTop","StackRouter","options","router","_objectSpread","getInitialState","_ref","routeNames","routeParamList","initialRouteName","includes","stale","key","index","routes","getRehydratedState","partialState","_ref2","state","filter","route","map","getStateForRouteNamesChange","_ref3","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\routers\\src\\StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\n\r\nimport BaseRouter from './BaseRouter';\r\nimport type {\r\n  CommonNavigationAction,\r\n  DefaultRouterOptions,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Route,\r\n  Router,\r\n} from './types';\r\n\r\nexport type StackActionType =\r\n  | {\r\n      type: 'REPLACE';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'PUSH';\r\n      payload: { name: string; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP';\r\n      payload: { count: number };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP_TO_TOP';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type StackRouterOptions = DefaultRouterOptions;\r\n\r\nexport type StackNavigationState<ParamList extends ParamListBase> =\r\n  NavigationState<ParamList> & {\r\n    /**\r\n     * Type of the router, in this case, it's stack.\r\n     */\r\n    type: 'stack';\r\n  };\r\n\r\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\r\n  /**\r\n   * Replace the current route with a new one.\r\n   *\r\n   * @param name Route name of the new route.\r\n   * @param [params] Params object for the new route.\r\n   */\r\n  replace<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\r\n      : [screen: RouteName, params: ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Push a new screen onto the stack.\r\n   *\r\n   * @param name Name of the route for the tab.\r\n   * @param [params] Params object for the route.\r\n   */\r\n  push<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\r\n      : [screen: RouteName, params: ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Pop a screen from the stack.\r\n   */\r\n  pop(count?: number): void;\r\n\r\n  /**\r\n   * Pop to the first route in the stack, dismissing all other screens.\r\n   */\r\n  popToTop(): void;\r\n};\r\n\r\nexport const StackActions = {\r\n  replace(name: string, params?: object): StackActionType {\r\n    return { type: 'REPLACE', payload: { name, params } };\r\n  },\r\n  push(name: string, params?: object): StackActionType {\r\n    return { type: 'PUSH', payload: { name, params } };\r\n  },\r\n  pop(count: number = 1): StackActionType {\r\n    return { type: 'POP', payload: { count } };\r\n  },\r\n  popToTop(): StackActionType {\r\n    return { type: 'POP_TO_TOP' };\r\n  },\r\n};\r\n\r\nexport default function StackRouter(options: StackRouterOptions) {\r\n  const router: Router<\r\n    StackNavigationState<ParamListBase>,\r\n    CommonNavigationAction | StackActionType\r\n  > = {\r\n    ...BaseRouter,\r\n\r\n    type: 'stack',\r\n\r\n    getInitialState({ routeNames, routeParamList }) {\r\n      const initialRouteName =\r\n        options.initialRouteName !== undefined &&\r\n        routeNames.includes(options.initialRouteName)\r\n          ? options.initialRouteName\r\n          : routeNames[0];\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: 0,\r\n        routeNames,\r\n        routes: [\r\n          {\r\n            key: `${initialRouteName}-${nanoid()}`,\r\n            name: initialRouteName,\r\n            params: routeParamList[initialRouteName],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n\r\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\r\n      let state = partialState;\r\n\r\n      if (state.stale === false) {\r\n        return state;\r\n      }\r\n\r\n      const routes = state.routes\r\n        .filter((route) => routeNames.includes(route.name))\r\n        .map(\r\n          (route) =>\r\n            ({\r\n              ...route,\r\n              key: route.key || `${route.name}-${nanoid()}`,\r\n              params:\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                    }\r\n                  : route.params,\r\n            } as Route<string>)\r\n        );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: routes.length - 1,\r\n        routeNames,\r\n        routes,\r\n      };\r\n    },\r\n\r\n    getStateForRouteNamesChange(\r\n      state,\r\n      { routeNames, routeParamList, routeKeyChanges }\r\n    ) {\r\n      const routes = state.routes.filter(\r\n        (route) =>\r\n          routeNames.includes(route.name) &&\r\n          !routeKeyChanges.includes(route.name)\r\n      );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined &&\r\n          routeNames.includes(options.initialRouteName)\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        routeNames,\r\n        routes,\r\n        index: Math.min(state.index, routes.length - 1),\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const index = state.routes.findIndex((r) => r.key === key);\r\n\r\n      if (index === -1 || index === state.index) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        index,\r\n        routes: state.routes.slice(0, index + 1),\r\n      };\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      const { routeParamList } = options;\r\n\r\n      switch (action.type) {\r\n        case 'REPLACE': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          const { name, key, params } = action.payload;\r\n\r\n          if (!state.routeNames.includes(name)) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            routes: state.routes.map((route, i) =>\r\n              i === index\r\n                ? {\r\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\r\n                    name,\r\n                    params:\r\n                      routeParamList[name] !== undefined\r\n                        ? {\r\n                            ...routeParamList[name],\r\n                            ...params,\r\n                          }\r\n                        : params,\r\n                  }\r\n                : route\r\n            ),\r\n          };\r\n        }\r\n\r\n        case 'PUSH':\r\n          if (state.routeNames.includes(action.payload.name)) {\r\n            const getId = options.routeGetIdList[action.payload.name];\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            const route = id\r\n              ? state.routes.find(\r\n                  (route) =>\r\n                    route.name === action.payload.name &&\r\n                    id === getId?.({ params: route.params })\r\n                )\r\n              : undefined;\r\n\r\n            let routes: Route<string>[];\r\n\r\n            if (route) {\r\n              routes = state.routes.filter((r) => r.key !== route.key);\r\n              routes.push({\r\n                ...route,\r\n                params:\r\n                  routeParamList[action.payload.name] !== undefined\r\n                    ? {\r\n                        ...routeParamList[action.payload.name],\r\n                        ...action.payload.params,\r\n                      }\r\n                    : action.payload.params,\r\n              });\r\n            } else {\r\n              routes = [\r\n                ...state.routes,\r\n                {\r\n                  key: `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'POP': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index > 0) {\r\n            const count = Math.max(index - action.payload.count + 1, 1);\r\n            const routes = state.routes\r\n              .slice(0, count)\r\n              .concat(state.routes.slice(index + 1));\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n        }\r\n\r\n        case 'POP_TO_TOP':\r\n          return router.getStateForAction(\r\n            state,\r\n            {\r\n              type: 'POP',\r\n              payload: { count: state.routes.length - 1 },\r\n            },\r\n            options\r\n          );\r\n\r\n        case 'NAVIGATE':\r\n          if (\r\n            action.payload.name !== undefined &&\r\n            !state.routeNames.includes(action.payload.name)\r\n          ) {\r\n            return null;\r\n          }\r\n\r\n          if (action.payload.key || action.payload.name) {\r\n            // If the route already exists, navigate to that\r\n            let index = -1;\r\n\r\n            const getId =\r\n              // `getId` and `key` can't be used together\r\n              action.payload.key === undefined &&\r\n              action.payload.name !== undefined\r\n                ? options.routeGetIdList[action.payload.name]\r\n                : undefined;\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            if (id) {\r\n              index = state.routes.findIndex(\r\n                (route) =>\r\n                  route.name === action.payload.name &&\r\n                  id === getId?.({ params: route.params })\r\n              );\r\n            } else if (\r\n              (state.routes[state.index].name === action.payload.name &&\r\n                action.payload.key === undefined) ||\r\n              state.routes[state.index].key === action.payload.key\r\n            ) {\r\n              index = state.index;\r\n            } else {\r\n              for (let i = state.routes.length - 1; i >= 0; i--) {\r\n                if (\r\n                  (state.routes[i].name === action.payload.name &&\r\n                    action.payload.key === undefined) ||\r\n                  state.routes[i].key === action.payload.key\r\n                ) {\r\n                  index = i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              index === -1 &&\r\n              action.payload.key &&\r\n              action.payload.name === undefined\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            if (index === -1 && action.payload.name !== undefined) {\r\n              const routes = [\r\n                ...state.routes,\r\n                {\r\n                  key:\r\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  path: action.payload.path,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n\r\n              return {\r\n                ...state,\r\n                routes,\r\n                index: routes.length - 1,\r\n              };\r\n            }\r\n\r\n            const route = state.routes[index];\r\n\r\n            let params;\r\n\r\n            if (action.payload.merge) {\r\n              params =\r\n                action.payload.params !== undefined ||\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                      ...action.payload.params,\r\n                    }\r\n                  : route.params;\r\n            } else {\r\n              params =\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...action.payload.params,\r\n                    }\r\n                  : action.payload.params;\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index,\r\n              routes: [\r\n                ...state.routes.slice(0, index),\r\n                params !== route.params ||\r\n                (action.payload.path && action.payload.path !== route.path)\r\n                  ? {\r\n                      ...route,\r\n                      path: action.payload.path ?? route.path,\r\n                      params,\r\n                    }\r\n                  : state.routes[index],\r\n              ],\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'GO_BACK':\r\n          if (state.index > 0) {\r\n            return router.getStateForAction(\r\n              state,\r\n              {\r\n                type: 'POP',\r\n                payload: { count: 1 },\r\n                target: action.target,\r\n                source: action.source,\r\n              },\r\n              options\r\n            );\r\n          }\r\n\r\n          return null;\r\n\r\n        default:\r\n          return BaseRouter.getStateForAction(state, action);\r\n      }\r\n    },\r\n\r\n    actionCreators: StackActions,\r\n  };\r\n\r\n  return router;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}