{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\nexport default function usePreventRemove(preventRemove, callback) {\n  const [id] = React.useState(() => nanoid());\n  const navigation = useNavigation();\n  const {\n    key: routeKey\n  } = useRoute();\n  const {\n    setPreventRemove\n  } = usePreventRemoveContext();\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  const beforeRemoveListener = useLatestCallback(e => {\n    if (!preventRemove) {\n      return;\n    }\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener), [navigation, beforeRemoveListener]);\n}","map":{"version":3,"names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","id","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\usePreventRemove.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport * as React from 'react';\r\nimport useLatestCallback from 'use-latest-callback';\r\n\r\nimport type { EventListenerCallback, EventMapCore } from './types';\r\nimport useNavigation from './useNavigation';\r\nimport usePreventRemoveContext from './usePreventRemoveContext';\r\nimport useRoute from './useRoute';\r\n\r\n/**\r\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\r\n *\r\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\r\n * @param callback Function which is executed when screen was prevented from being removed.\r\n */\r\nexport default function usePreventRemove(\r\n  preventRemove: boolean,\r\n  callback: (options: { data: { action: NavigationAction } }) => void\r\n) {\r\n  const [id] = React.useState(() => nanoid());\r\n\r\n  const navigation = useNavigation();\r\n  const { key: routeKey } = useRoute();\r\n\r\n  const { setPreventRemove } = usePreventRemoveContext();\r\n\r\n  React.useEffect(() => {\r\n    setPreventRemove(id, routeKey, preventRemove);\r\n    return () => {\r\n      setPreventRemove(id, routeKey, false);\r\n    };\r\n  }, [setPreventRemove, id, routeKey, preventRemove]);\r\n\r\n  const beforeRemoveListener = useLatestCallback<\r\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\r\n  >((e) => {\r\n    if (!preventRemove) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n\r\n    callback({ data: e.data });\r\n  });\r\n\r\n  React.useEffect(\r\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\r\n    [navigation, beforeRemoveListener]\r\n  );\r\n}\r\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,iBAAiB,MAAM,qBAAqB;AAGnD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,uBAAuB,MAAM,2BAA2B;AAC/D,OAAOC,QAAQ,MAAM,YAAY;AAQjC,eAAe,SAASC,gBAAgBA,CACtCC,aAAsB,EACtBC,QAAmE,EACnE;EACA,MAAM,CAACC,EAAE,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,MAAMV,MAAM,EAAE,CAAC;EAE3C,MAAMW,UAAU,GAAGR,aAAa,EAAE;EAClC,MAAM;IAAES,GAAG,EAAEC;EAAS,CAAC,GAAGR,QAAQ,EAAE;EAEpC,MAAM;IAAES;EAAiB,CAAC,GAAGV,uBAAuB,EAAE;EAEtDH,KAAK,CAACc,SAAS,CAAC,MAAM;IACpBD,gBAAgB,CAACL,EAAE,EAAEI,QAAQ,EAAEN,aAAa,CAAC;IAC7C,OAAO,MAAM;MACXO,gBAAgB,CAACL,EAAE,EAAEI,QAAQ,EAAE,KAAK,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACC,gBAAgB,EAAEL,EAAE,EAAEI,QAAQ,EAAEN,aAAa,CAAC,CAAC;EAEnD,MAAMS,oBAAoB,GAAGd,iBAAiB,CAE3Ce,CAAC,IAAK;IACP,IAAI,CAACV,aAAa,EAAE;MAClB;IACF;IAEAU,CAAC,CAACC,cAAc,EAAE;IAElBV,QAAQ,CAAC;MAAEW,IAAI,EAAEF,CAAC,CAACE;IAAK,CAAC,CAAC;EAC5B,CAAC,CAAC;EAEFlB,KAAK,CAACc,SAAS,CACb,MAAMJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAES,WAAW,CAAC,cAAc,EAAEJ,oBAAoB,CAAC,EACnE,CAACL,UAAU,EAAEK,oBAAoB,CAAC,CACnC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}