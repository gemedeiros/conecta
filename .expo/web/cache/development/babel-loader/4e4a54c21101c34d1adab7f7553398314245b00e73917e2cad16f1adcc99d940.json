{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  let {\n    navigation,\n    focusedListeners\n  } = _ref;\n  const {\n    addListener\n  } = React.useContext(NavigationBuilderContext);\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      for (const listener of focusedListeners) {\n        const {\n          handled,\n          result\n        } = listener(callback);\n        if (handled) {\n          return {\n            handled,\n            result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","_ref","navigation","focusedListeners","addListener","useContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport NavigationBuilderContext, {\r\n  FocusedNavigationCallback,\r\n  FocusedNavigationListener,\r\n} from './NavigationBuilderContext';\r\nimport type { NavigationHelpers } from './types';\r\n\r\ntype Options = {\r\n  navigation: NavigationHelpers<ParamListBase>;\r\n  focusedListeners: FocusedNavigationListener[];\r\n};\r\n\r\n/**\r\n * Hook for passing focus callback to children\r\n */\r\nexport default function useFocusedListenersChildrenAdapter({\r\n  navigation,\r\n  focusedListeners,\r\n}: Options) {\r\n  const { addListener } = React.useContext(NavigationBuilderContext);\r\n\r\n  const listener = React.useCallback(\r\n    (callback: FocusedNavigationCallback<any>) => {\r\n      if (navigation.isFocused()) {\r\n        for (const listener of focusedListeners) {\r\n          const { handled, result } = listener(callback);\r\n\r\n          if (handled) {\r\n            return { handled, result };\r\n          }\r\n        }\r\n\r\n        return { handled: true, result: callback(navigation) };\r\n      } else {\r\n        return { handled: false, result: null };\r\n      }\r\n    },\r\n    [focusedListeners, navigation]\r\n  );\r\n\r\n  React.useEffect(\r\n    () => addListener?.('focus', listener),\r\n    [addListener, listener]\r\n  );\r\n}\r\n"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,wBAAwB,MAGxB,4BAA4B;AAWnC,eAAe,SAASC,kCAAkCA,CAAAC,IAAA,EAG9C;EAAA,IAH+C;IACzDC,UAAU;IACVC;EACO,CAAC,GAAAF,IAAA;EACR,MAAM;IAAEG;EAAY,CAAC,GAAGN,KAAK,CAACO,UAAU,CAACN,wBAAwB,CAAC;EAElE,MAAMO,QAAQ,GAAGR,KAAK,CAACS,WAAW,CAC/BC,QAAwC,IAAK;IAC5C,IAAIN,UAAU,CAACO,SAAS,EAAE,EAAE;MAC1B,KAAK,MAAMH,QAAQ,IAAIH,gBAAgB,EAAE;QACvC,MAAM;UAAEO,OAAO;UAAEC;QAAO,CAAC,GAAGL,QAAQ,CAACE,QAAQ,CAAC;QAE9C,IAAIE,OAAO,EAAE;UACX,OAAO;YAAEA,OAAO;YAAEC;UAAO,CAAC;QAC5B;MACF;MAEA,OAAO;QAAED,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEH,QAAQ,CAACN,UAAU;MAAE,CAAC;IACxD,CAAC,MAAM;MACL,OAAO;QAAEQ,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAK,CAAC;IACzC;EACF,CAAC,EACD,CAACR,gBAAgB,EAAED,UAAU,CAAC,CAC/B;EAEDJ,KAAK,CAACc,SAAS,CACb,MAAMR,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAG,OAAO,EAAEE,QAAQ,CAAC,EACtC,CAACF,WAAW,EAAEE,QAAQ,CAAC,CACxB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}