{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nconst _excluded = [\"emit\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n  const cache = React.useMemo(() => ({\n    current: {}\n  }), [getState, navigation, setOptions, router, emitter]);\n  const actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      const {\n          emit\n        } = navigation,\n        rest = _objectWithoutProperties(navigation, _excluded);\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n        if (action != null) {\n          navigation.dispatch(_objectSpread({\n            source: route.key\n          }, action));\n        }\n      };\n      const withStack = callback => {\n        let isStackSet = false;\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return withStack(() => dispatch(actions[name](...args)));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        getParent: id => {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n          return rest.getParent(id);\n        },\n        setOptions: options => setOptions(o => _objectSpread(_objectSpread({}, o), {}, {\n          [route.key]: _objectSpread(_objectSpread({}, o[route.key]), options)\n        })),\n        isFocused: () => {\n          const state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","_ref","state","getState","navigation","setOptions","router","emitter","stackRef","useContext","cache","useMemo","current","actions","_objectSpread","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","_objectWithoutProperties","_excluded","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","_len","arguments","length","args","Array","_key","create","getParent","id","getId","options","o","isFocused","index"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\useNavigationCache.tsx"],"sourcesContent":["import {\r\n  CommonActions,\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport NavigationBuilderContext from './NavigationBuilderContext';\r\nimport type { NavigationHelpers, NavigationProp } from './types';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\n\r\ntype Options<\r\n  State extends NavigationState,\r\n  EventMap extends Record<string, any>\r\n> = {\r\n  state: State;\r\n  getState: () => State;\r\n  navigation: NavigationHelpers<ParamListBase> &\r\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\r\n  setOptions: (\r\n    cb: (options: Record<string, object>) => Record<string, object>\r\n  ) => void;\r\n  router: Router<State, NavigationAction>;\r\n  emitter: NavigationEventEmitter<EventMap>;\r\n};\r\n\r\ntype NavigationCache<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends Record<string, any>\r\n> = Record<\r\n  string,\r\n  NavigationProp<\r\n    ParamListBase,\r\n    string,\r\n    string | undefined,\r\n    State,\r\n    ScreenOptions,\r\n    EventMap\r\n  >\r\n>;\r\n\r\n/**\r\n * Hook to cache navigation objects for each screen in the navigator.\r\n * It's important to cache them to make sure navigation objects don't change between renders.\r\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\r\n */\r\nexport default function useNavigationCache<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends Record<string, any>\r\n>({\r\n  state,\r\n  getState,\r\n  navigation,\r\n  setOptions,\r\n  router,\r\n  emitter,\r\n}: Options<State, EventMap>) {\r\n  const { stackRef } = React.useContext(NavigationBuilderContext);\r\n\r\n  // Cache object which holds navigation objects for each screen\r\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\r\n  // In reality, these deps will rarely change, if ever\r\n  const cache = React.useMemo(\r\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [getState, navigation, setOptions, router, emitter]\r\n  );\r\n\r\n  const actions = {\r\n    ...router.actionCreators,\r\n    ...CommonActions,\r\n  };\r\n\r\n  cache.current = state.routes.reduce<\r\n    NavigationCache<State, ScreenOptions, EventMap>\r\n  >((acc, route) => {\r\n    const previous = cache.current[route.key];\r\n\r\n    type Thunk =\r\n      | NavigationAction\r\n      | ((state: State) => NavigationAction | null | undefined);\r\n\r\n    if (previous) {\r\n      // If a cached navigation object already exists, reuse it\r\n      acc[route.key] = previous;\r\n    } else {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const { emit, ...rest } = navigation;\r\n\r\n      const dispatch = (thunk: Thunk) => {\r\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\r\n\r\n        if (action != null) {\r\n          navigation.dispatch({ source: route.key, ...action });\r\n        }\r\n      };\r\n\r\n      const withStack = (callback: () => void) => {\r\n        let isStackSet = false;\r\n\r\n        try {\r\n          if (\r\n            process.env.NODE_ENV !== 'production' &&\r\n            stackRef &&\r\n            !stackRef.current\r\n          ) {\r\n            // Capture the stack trace for devtools\r\n            stackRef.current = new Error().stack;\r\n            isStackSet = true;\r\n          }\r\n\r\n          callback();\r\n        } finally {\r\n          if (isStackSet && stackRef) {\r\n            stackRef.current = undefined;\r\n          }\r\n        }\r\n      };\r\n\r\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\r\n        (acc, name) => {\r\n          acc[name] = (...args: any) =>\r\n            withStack(() =>\r\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\r\n              dispatch(actions[name](...args))\r\n            );\r\n\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n\r\n      acc[route.key] = {\r\n        ...rest,\r\n        ...helpers,\r\n        // FIXME: too much work to fix the types for now\r\n        ...(emitter.create(route.key) as any),\r\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\r\n        getParent: (id?: string) => {\r\n          if (id !== undefined && id === rest.getId()) {\r\n            // If the passed id is the same as the current navigation id,\r\n            // we return the cached navigation object for the relevant route\r\n            return acc[route.key];\r\n          }\r\n\r\n          return rest.getParent(id);\r\n        },\r\n        setOptions: (options: object) =>\r\n          setOptions((o) => ({\r\n            ...o,\r\n            [route.key]: { ...o[route.key], ...options },\r\n          })),\r\n        isFocused: () => {\r\n          const state = getState();\r\n\r\n          if (state.routes[state.index].key !== route.key) {\r\n            return false;\r\n          }\r\n\r\n          // If the current screen is focused, we also need to check if parent navigator is focused\r\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\r\n          return navigation ? navigation.isFocused() : true;\r\n        },\r\n      };\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  return cache.current;\r\n}\r\n"],"mappings":";;;;;AAAA,SACEA,aAAa,QAKR,2BAA2B;AAClC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,OAAOC,wBAAwB,MAAM,4BAA4B;AAwCjE,eAAe,SAASC,kBAAkBA,CAAAC,IAAA,EAWb;EAAA,IAP3B;IACAC,KAAK;IACLC,QAAQ;IACRC,UAAU;IACVC,UAAU;IACVC,MAAM;IACNC;EACwB,CAAC,GAAAN,IAAA;EACzB,MAAM;IAAEO;EAAS,CAAC,GAAGV,KAAK,CAACW,UAAU,CAACV,wBAAwB,CAAC;EAK/D,MAAMW,KAAK,GAAGZ,KAAK,CAACa,OAAO,CACzB,OAAO;IAAEC,OAAO,EAAE,CAAC;EAAqD,CAAC,CAAC,EAE1E,CAACT,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,OAAO,CAAC,CACpD;EAED,MAAMM,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACRR,MAAM,CAACS,cAAc,GACrBlB,aAAA,CACJ;EAEDa,KAAK,CAACE,OAAO,GAAGV,KAAK,CAACc,MAAM,CAACC,MAAM,CAEjC,CAACC,GAAG,EAAEC,KAAK,KAAK;IAChB,MAAMC,QAAQ,GAAGV,KAAK,CAACE,OAAO,CAACO,KAAK,CAACE,GAAG,CAAC;IAMzC,IAAID,QAAQ,EAAE;MAEZF,GAAG,CAACC,KAAK,CAACE,GAAG,CAAC,GAAGD,QAAQ;IAC3B,CAAC,MAAM;MAEL,MAAM;UAAEE;QAAc,CAAC,GAAGlB,UAAU;QAAnBmB,IAAA,GAAAC,wBAAA,CAASpB,UAAU,EAAAqB,SAAA;MAEpC,MAAMC,QAAQ,GAAIC,KAAY,IAAK;QACjC,MAAMC,MAAM,GAAG,OAAOD,KAAK,KAAK,UAAU,GAAGA,KAAK,CAACxB,QAAQ,EAAE,CAAC,GAAGwB,KAAK;QAEtE,IAAIC,MAAM,IAAI,IAAI,EAAE;UAClBxB,UAAU,CAACsB,QAAQ,CAAAZ,aAAA;YAAGe,MAAM,EAAEV,KAAK,CAACE;UAAG,GAAKO,MAAA,CAAQ,CAAC;QACvD;MACF,CAAC;MAED,MAAME,SAAS,GAAIC,QAAoB,IAAK;QAC1C,IAAIC,UAAU,GAAG,KAAK;QAEtB,IAAI;UACF,IACEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IACrC3B,QAAQ,IACR,CAACA,QAAQ,CAACI,OAAO,EACjB;YAEAJ,QAAQ,CAACI,OAAO,GAAG,IAAIwB,KAAK,EAAE,CAACC,KAAK;YACpCL,UAAU,GAAG,IAAI;UACnB;UAEAD,QAAQ,EAAE;QACZ,CAAC,SAAS;UACR,IAAIC,UAAU,IAAIxB,QAAQ,EAAE;YAC1BA,QAAQ,CAACI,OAAO,GAAG0B,SAAS;UAC9B;QACF;MACF,CAAC;MAED,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC5B,OAAO,CAAC,CAACI,MAAM,CACzC,CAACC,GAAG,EAAEwB,IAAI,KAAK;QACbxB,GAAG,CAACwB,IAAI,CAAC,GAAG;UAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;UAAA;UAAA,OAClBlB,SAAS,CAAC,MAERJ,QAAQ,CAACb,OAAO,CAAC6B,IAAI,CAAC,CAAC,GAAGI,IAAI,CAAC,CAAC,CACjC;QAAA;QAEH,OAAO5B,GAAG;MACZ,CAAC,EACD,CAAC,CAAC,CACH;MAEDA,GAAG,CAACC,KAAK,CAACE,GAAG,CAAC,GAAAP,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACTS,IAAI,GACJgB,OAAO,GAENhC,OAAO,CAAC0C,MAAM,CAAC9B,KAAK,CAACE,GAAG,CAAS;QACrCK,QAAQ,EAAGC,KAAY,IAAKG,SAAS,CAAC,MAAMJ,QAAQ,CAACC,KAAK,CAAC,CAAC;QAC5DuB,SAAS,EAAGC,EAAW,IAAK;UAC1B,IAAIA,EAAE,KAAKb,SAAS,IAAIa,EAAE,KAAK5B,IAAI,CAAC6B,KAAK,EAAE,EAAE;YAG3C,OAAOlC,GAAG,CAACC,KAAK,CAACE,GAAG,CAAC;UACvB;UAEA,OAAOE,IAAI,CAAC2B,SAAS,CAACC,EAAE,CAAC;QAC3B,CAAC;QACD9C,UAAU,EAAGgD,OAAe,IAC1BhD,UAAU,CAAEiD,CAAC,IAAAxC,aAAA,CAAAA,aAAA,KACRwC,CAAC;UACJ,CAACnC,KAAK,CAACE,GAAG,GAAAP,aAAA,CAAAA,aAAA,KAAQwC,CAAC,CAACnC,KAAK,CAACE,GAAG,CAAC,GAAKgC,OAAA;QAAQ,EAC3C,CAAC;QACLE,SAAS,EAAEA,CAAA,KAAM;UACf,MAAMrD,KAAK,GAAGC,QAAQ,EAAE;UAExB,IAAID,KAAK,CAACc,MAAM,CAACd,KAAK,CAACsD,KAAK,CAAC,CAACnC,GAAG,KAAKF,KAAK,CAACE,GAAG,EAAE;YAC/C,OAAO,KAAK;UACd;UAIA,OAAOjB,UAAU,GAAGA,UAAU,CAACmD,SAAS,EAAE,GAAG,IAAI;QACnD;MAAA,EACD;IACH;IAEA,OAAOrC,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,OAAOR,KAAK,CAACE,OAAO;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}