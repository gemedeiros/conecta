{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nexport default function useOnRouteFocus(_ref) {\n  let {\n    router,\n    getState,\n    key: sourceRouteKey,\n    setState\n  } = _ref;\n  const {\n    onRouteFocus: onRouteFocusParent\n  } = React.useContext(NavigationBuilderContext);\n  return React.useCallback(key => {\n    const state = getState();\n    const result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnRouteFocus","_ref","router","getState","key","sourceRouteKey","setState","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\useOnRouteFocus.tsx"],"sourcesContent":["import type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport NavigationBuilderContext from './NavigationBuilderContext';\r\n\r\ntype Options<Action extends NavigationAction> = {\r\n  router: Router<NavigationState, Action>;\r\n  getState: () => NavigationState;\r\n  setState: (state: NavigationState) => void;\r\n  key?: string;\r\n};\r\n\r\n/**\r\n * Hook to handle focus actions for a route.\r\n * Focus action needs to be treated specially, coz when a nested route is focused,\r\n * the parent navigators also needs to be focused.\r\n */\r\nexport default function useOnRouteFocus<Action extends NavigationAction>({\r\n  router,\r\n  getState,\r\n  key: sourceRouteKey,\r\n  setState,\r\n}: Options<Action>) {\r\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\r\n    NavigationBuilderContext\r\n  );\r\n\r\n  return React.useCallback(\r\n    (key: string) => {\r\n      const state = getState();\r\n      const result = router.getStateForRouteFocus(state, key);\r\n\r\n      if (result !== state) {\r\n        setState(result);\r\n      }\r\n\r\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\r\n        onRouteFocusParent(sourceRouteKey);\r\n      }\r\n    },\r\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\r\n  );\r\n}\r\n"],"mappings":"AAKA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,wBAAwB,MAAM,4BAA4B;AAcjE,eAAe,SAASC,eAAeA,CAAAC,IAAA,EAKnB;EAAA,IALqD;IACvEC,MAAM;IACNC,QAAQ;IACRC,GAAG,EAAEC,cAAc;IACnBC;EACe,CAAC,GAAAL,IAAA;EAChB,MAAM;IAAEM,YAAY,EAAEC;EAAmB,CAAC,GAAGV,KAAK,CAACW,UAAU,CAC3DV,wBAAwB,CACzB;EAED,OAAOD,KAAK,CAACY,WAAW,CACrBN,GAAW,IAAK;IACf,MAAMO,KAAK,GAAGR,QAAQ,EAAE;IACxB,MAAMS,MAAM,GAAGV,MAAM,CAACW,qBAAqB,CAACF,KAAK,EAAEP,GAAG,CAAC;IAEvD,IAAIQ,MAAM,KAAKD,KAAK,EAAE;MACpBL,QAAQ,CAACM,MAAM,CAAC;IAClB;IAEA,IAAIJ,kBAAkB,KAAKM,SAAS,IAAIT,cAAc,KAAKS,SAAS,EAAE;MACpEN,kBAAkB,CAACH,cAAc,CAAC;IACpC;EACF,CAAC,EACD,CAACF,QAAQ,EAAEK,kBAAkB,EAAEN,MAAM,EAAEI,QAAQ,EAAED,cAAc,CAAC,CACjE;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}