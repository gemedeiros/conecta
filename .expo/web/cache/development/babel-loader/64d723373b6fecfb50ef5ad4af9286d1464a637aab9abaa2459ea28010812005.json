{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"contentContainerStyle\", \"horizontal\", \"onContentSizeChange\", \"refreshControl\", \"stickyHeaderIndices\", \"pagingEnabled\", \"forwardedRef\", \"keyboardDismissMode\", \"onScroll\", \"centerContent\"];\nimport Dimensions from '../Dimensions';\nimport dismissKeyboard from '../../modules/dismissKeyboard';\nimport invariant from 'fbjs/lib/invariant';\nimport mergeRefs from '../../modules/mergeRefs';\nimport Platform from '../Platform';\nimport ScrollViewBase from './ScrollViewBase';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport UIManager from '../UIManager';\nimport View from '../View';\nimport React from 'react';\nimport warning from 'fbjs/lib/warning';\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nclass ScrollView extends React.Component {\n  constructor() {\n    super(...arguments);\n    this._scrollNodeRef = null;\n    this._innerViewRef = null;\n    this.isTouching = false;\n    this.lastMomentumScrollBeginTime = 0;\n    this.lastMomentumScrollEndTime = 0;\n    this.observedScrollSinceBecomingResponder = false;\n    this.becameResponderWhileAnimating = false;\n    this.scrollResponderHandleScrollShouldSetResponder = () => {\n      return this.isTouching;\n    };\n    this.scrollResponderHandleStartShouldSetResponderCapture = e => {\n      return this.scrollResponderIsAnimating();\n    };\n    this.scrollResponderHandleTerminationRequest = () => {\n      return !this.observedScrollSinceBecomingResponder;\n    };\n    this.scrollResponderHandleTouchEnd = e => {\n      var nativeEvent = e.nativeEvent;\n      this.isTouching = nativeEvent.touches.length !== 0;\n      this.props.onTouchEnd && this.props.onTouchEnd(e);\n    };\n    this.scrollResponderHandleResponderRelease = e => {\n      this.props.onResponderRelease && this.props.onResponderRelease(e);\n      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n      if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.observedScrollSinceBecomingResponder && !this.becameResponderWhileAnimating) {\n        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n    };\n    this.scrollResponderHandleScroll = e => {\n      this.observedScrollSinceBecomingResponder = true;\n      this.props.onScroll && this.props.onScroll(e);\n    };\n    this.scrollResponderHandleResponderGrant = e => {\n      this.observedScrollSinceBecomingResponder = false;\n      this.props.onResponderGrant && this.props.onResponderGrant(e);\n      this.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n    };\n    this.scrollResponderHandleScrollBeginDrag = e => {\n      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n    };\n    this.scrollResponderHandleScrollEndDrag = e => {\n      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n    };\n    this.scrollResponderHandleMomentumScrollBegin = e => {\n      this.lastMomentumScrollBeginTime = Date.now();\n      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n    };\n    this.scrollResponderHandleMomentumScrollEnd = e => {\n      this.lastMomentumScrollEndTime = Date.now();\n      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n    };\n    this.scrollResponderHandleTouchStart = e => {\n      this.isTouching = true;\n      this.props.onTouchStart && this.props.onTouchStart(e);\n    };\n    this.scrollResponderHandleTouchMove = e => {\n      this.props.onTouchMove && this.props.onTouchMove(e);\n    };\n    this.scrollResponderIsAnimating = () => {\n      var now = Date.now();\n      var timeSinceLastMomentumScrollEnd = now - this.lastMomentumScrollEndTime;\n      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.lastMomentumScrollEndTime < this.lastMomentumScrollBeginTime;\n      return isAnimating;\n    };\n    this.scrollResponderScrollTo = (x, y, animated) => {\n      if (typeof x === 'number') {\n        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n      } else {\n        var _ref = x || emptyObject;\n        x = _ref.x;\n        y = _ref.y;\n        animated = _ref.animated;\n      }\n      var node = this.getScrollableNode();\n      var left = x || 0;\n      var top = y || 0;\n      if (node != null) {\n        if (typeof node.scroll === 'function') {\n          node.scroll({\n            top,\n            left,\n            behavior: !animated ? 'auto' : 'smooth'\n          });\n        } else {\n          node.scrollLeft = left;\n          node.scrollTop = top;\n        }\n      }\n    };\n    this.scrollResponderZoomTo = (rect, animated) => {\n      if (Platform.OS !== 'ios') {\n        invariant('zoomToRect is not implemented');\n      }\n    };\n    this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset) => {\n      this.additionalScrollOffset = additionalOffset || 0;\n      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n      UIManager.measureLayout(nodeHandle, this.getInnerViewNode(), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n    };\n    this.scrollResponderInputMeasureAndScrollToKeyboard = (left, top, width, height) => {\n      var keyboardScreenY = Dimensions.get('window').height;\n      if (this.keyboardWillOpenTo) {\n        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n      }\n      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\n      if (this.preventNegativeScrollOffset) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      this.scrollResponderScrollTo({\n        x: 0,\n        y: scrollOffsetY,\n        animated: true\n      });\n      this.additionalOffset = 0;\n      this.preventNegativeScrollOffset = false;\n    };\n    this.scrollResponderKeyboardWillShow = e => {\n      this.keyboardWillOpenTo = e;\n      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n    };\n    this.scrollResponderKeyboardWillHide = e => {\n      this.keyboardWillOpenTo = null;\n      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n    };\n    this.scrollResponderKeyboardDidShow = e => {\n      if (e) {\n        this.keyboardWillOpenTo = e;\n      }\n      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n    };\n    this.scrollResponderKeyboardDidHide = e => {\n      this.keyboardWillOpenTo = null;\n      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n    };\n    this.flashScrollIndicators = () => {\n      this.scrollResponderFlashScrollIndicators();\n    };\n    this.getScrollResponder = () => {\n      return this;\n    };\n    this.getScrollableNode = () => {\n      return this._scrollNodeRef;\n    };\n    this.getInnerViewRef = () => {\n      return this._innerViewRef;\n    };\n    this.getInnerViewNode = () => {\n      return this._innerViewRef;\n    };\n    this.getNativeScrollRef = () => {\n      return this._scrollNodeRef;\n    };\n    this.scrollTo = (y, x, animated) => {\n      if (typeof y === 'number') {\n        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.');\n      } else {\n        var _ref2 = y || emptyObject;\n        x = _ref2.x;\n        y = _ref2.y;\n        animated = _ref2.animated;\n      }\n      this.scrollResponderScrollTo({\n        x: x || 0,\n        y: y || 0,\n        animated: animated !== false\n      });\n    };\n    this.scrollToEnd = options => {\n      var animated = (options && options.animated) !== false;\n      var horizontal = this.props.horizontal;\n      var scrollResponderNode = this.getScrollableNode();\n      var x = horizontal ? scrollResponderNode.scrollWidth : 0;\n      var y = horizontal ? 0 : scrollResponderNode.scrollHeight;\n      this.scrollResponderScrollTo({\n        x,\n        y,\n        animated\n      });\n    };\n    this._handleContentOnLayout = e => {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        width = _e$nativeEvent$layout.width,\n        height = _e$nativeEvent$layout.height;\n      this.props.onContentSizeChange(width, height);\n    };\n    this._handleScroll = e => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this.props.onScroll && this.props.scrollEventThrottle == null) {\n          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + \"cause frame drops, use a bigger number if you don't need as \" + 'much precision.');\n        }\n      }\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n      this.scrollResponderHandleScroll(e);\n    };\n    this._setInnerViewRef = node => {\n      this._innerViewRef = node;\n    };\n    this._setScrollNodeRef = node => {\n      this._scrollNodeRef = node;\n      if (node != null) {\n        node.getScrollResponder = this.getScrollResponder;\n        node.getInnerViewNode = this.getInnerViewNode;\n        node.getInnerViewRef = this.getInnerViewRef;\n        node.getNativeScrollRef = this.getNativeScrollRef;\n        node.getScrollableNode = this.getScrollableNode;\n        node.scrollTo = this.scrollTo;\n        node.scrollToEnd = this.scrollToEnd;\n        node.flashScrollIndicators = this.flashScrollIndicators;\n        node.scrollResponderZoomTo = this.scrollResponderZoomTo;\n        node.scrollResponderScrollNativeHandleToKeyboard = this.scrollResponderScrollNativeHandleToKeyboard;\n      }\n      var ref = mergeRefs(this.props.forwardedRef);\n      ref(node);\n    };\n  }\n  scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  }\n  scrollResponderHandleResponderReject() {\n    warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  }\n  scrollResponderFlashScrollIndicators() {}\n  scrollResponderTextInputFocusError(e) {\n    console.error('Error measuring text field: ', e);\n  }\n  render() {\n    var _this$props = this.props,\n      contentContainerStyle = _this$props.contentContainerStyle,\n      horizontal = _this$props.horizontal,\n      onContentSizeChange = _this$props.onContentSizeChange,\n      refreshControl = _this$props.refreshControl,\n      stickyHeaderIndices = _this$props.stickyHeaderIndices,\n      pagingEnabled = _this$props.pagingEnabled,\n      forwardedRef = _this$props.forwardedRef,\n      keyboardDismissMode = _this$props.keyboardDismissMode,\n      onScroll = _this$props.onScroll,\n      centerContent = _this$props.centerContent,\n      other = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    if (process.env.NODE_ENV !== 'production' && this.props.style) {\n      var style = StyleSheet.flatten(this.props.style);\n      var childLayoutProps = ['alignItems', 'justifyContent'].filter(prop => style && style[prop] !== undefined);\n      invariant(childLayoutProps.length === 0, \"ScrollView child layout (\" + JSON.stringify(childLayoutProps) + \") \" + 'must be applied through the contentContainerStyle prop.');\n    }\n    var contentSizeChangeProps = {};\n    if (onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout\n      };\n    }\n    var hasStickyHeaderIndices = !horizontal && Array.isArray(stickyHeaderIndices);\n    var children = hasStickyHeaderIndices || pagingEnabled ? React.Children.map(this.props.children, (child, i) => {\n      var isSticky = hasStickyHeaderIndices && stickyHeaderIndices.indexOf(i) > -1;\n      if (child != null && (isSticky || pagingEnabled)) {\n        return React.createElement(View, {\n          style: [isSticky && styles.stickyHeader, pagingEnabled && styles.pagingEnabledChild]\n        }, child);\n      } else {\n        return child;\n      }\n    }) : this.props.children;\n    var contentContainer = React.createElement(View, _extends({}, contentSizeChangeProps, {\n      children: children,\n      collapsable: false,\n      ref: this._setInnerViewRef,\n      style: [horizontal && styles.contentContainerHorizontal, centerContent && styles.contentContainerCenterContent, contentContainerStyle]\n    }));\n    var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\n    var pagingEnabledStyle = horizontal ? styles.pagingEnabledHorizontal : styles.pagingEnabledVertical;\n    var props = _objectSpread(_objectSpread({}, other), {}, {\n      style: [baseStyle, pagingEnabled && pagingEnabledStyle, this.props.style],\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n      onScroll: this._handleScroll,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      onResponderReject: this.scrollResponderHandleResponderReject\n    });\n    var ScrollViewClass = ScrollViewBase;\n    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');\n    var scrollView = React.createElement(ScrollViewClass, _extends({}, props, {\n      ref: this._setScrollNodeRef\n    }), contentContainer);\n    if (refreshControl) {\n      return React.cloneElement(refreshControl, {\n        style: props.style\n      }, scrollView);\n    }\n    return scrollView;\n  }\n}\nvar commonStyle = {\n  flexGrow: 1,\n  flexShrink: 1,\n  transform: 'translateZ(0)',\n  WebkitOverflowScrolling: 'touch'\n};\nvar styles = StyleSheet.create({\n  baseVertical: _objectSpread(_objectSpread({}, commonStyle), {}, {\n    flexDirection: 'column',\n    overflowX: 'hidden',\n    overflowY: 'auto'\n  }),\n  baseHorizontal: _objectSpread(_objectSpread({}, commonStyle), {}, {\n    flexDirection: 'row',\n    overflowX: 'auto',\n    overflowY: 'hidden'\n  }),\n  contentContainerHorizontal: {\n    flexDirection: 'row'\n  },\n  contentContainerCenterContent: {\n    justifyContent: 'center',\n    flexGrow: 1\n  },\n  stickyHeader: {\n    position: 'sticky',\n    top: 0,\n    zIndex: 10\n  },\n  pagingEnabledHorizontal: {\n    scrollSnapType: 'x mandatory'\n  },\n  pagingEnabledVertical: {\n    scrollSnapType: 'y mandatory'\n  },\n  pagingEnabledChild: {\n    scrollSnapAlign: 'start'\n  }\n});\nvar ForwardedScrollView = React.forwardRef((props, forwardedRef) => {\n  return React.createElement(ScrollView, _extends({}, props, {\n    forwardedRef: forwardedRef\n  }));\n});\nForwardedScrollView.displayName = 'ScrollView';\nexport default ForwardedScrollView;","map":{"version":3,"names":["_objectSpread","_extends","_objectWithoutPropertiesLoose","_excluded","Dimensions","dismissKeyboard","invariant","mergeRefs","Platform","ScrollViewBase","StyleSheet","TextInputState","UIManager","View","React","warning","emptyObject","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollView","Component","constructor","arguments","_scrollNodeRef","_innerViewRef","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","scrollResponderHandleStartShouldSetResponderCapture","e","scrollResponderIsAnimating","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","props","onTouchEnd","scrollResponderHandleResponderRelease","onResponderRelease","currentlyFocusedTextInput","currentlyFocusedField","keyboardShouldPersistTaps","target","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","Date","now","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderScrollTo","x","y","animated","console","warn","_ref","node","getScrollableNode","left","top","scroll","behavior","scrollLeft","scrollTop","scrollResponderZoomTo","rect","OS","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","flashScrollIndicators","scrollResponderFlashScrollIndicators","getScrollResponder","getInnerViewRef","getNativeScrollRef","scrollTo","_ref2","scrollToEnd","options","horizontal","scrollResponderNode","scrollWidth","scrollHeight","_handleContentOnLayout","_e$nativeEvent$layout","layout","onContentSizeChange","_handleScroll","process","env","NODE_ENV","scrollEventThrottle","log","keyboardDismissMode","_setInnerViewRef","_setScrollNodeRef","ref","forwardedRef","scrollResponderHandleStartShouldSetResponder","scrollResponderHandleResponderReject","error","render","_this$props","contentContainerStyle","refreshControl","stickyHeaderIndices","pagingEnabled","centerContent","other","style","flatten","childLayoutProps","filter","prop","undefined","JSON","stringify","contentSizeChangeProps","onLayout","hasStickyHeaderIndices","Array","isArray","children","Children","map","child","i","isSticky","indexOf","createElement","styles","stickyHeader","pagingEnabledChild","contentContainer","collapsable","contentContainerHorizontal","contentContainerCenterContent","baseStyle","baseHorizontal","baseVertical","pagingEnabledStyle","pagingEnabledHorizontal","pagingEnabledVertical","onStartShouldSetResponder","onStartShouldSetResponderCapture","onScrollShouldSetResponder","onResponderTerminationRequest","onResponderTerminate","scrollResponderHandleTerminate","onResponderReject","ScrollViewClass","scrollView","cloneElement","commonStyle","flexGrow","flexShrink","transform","WebkitOverflowScrolling","create","flexDirection","overflowX","overflowY","justifyContent","position","zIndex","scrollSnapType","scrollSnapAlign","ForwardedScrollView","forwardRef","displayName"],"sources":["C:/Users/thiago.attico/source/repos/conecta/node_modules/react-native-web/dist/exports/ScrollView/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\r\nimport _extends from \"@babel/runtime/helpers/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"contentContainerStyle\", \"horizontal\", \"onContentSizeChange\", \"refreshControl\", \"stickyHeaderIndices\", \"pagingEnabled\", \"forwardedRef\", \"keyboardDismissMode\", \"onScroll\", \"centerContent\"];\r\n/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\nimport Dimensions from '../Dimensions';\r\nimport dismissKeyboard from '../../modules/dismissKeyboard';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport mergeRefs from '../../modules/mergeRefs';\r\nimport Platform from '../Platform';\r\nimport ScrollViewBase from './ScrollViewBase';\r\nimport StyleSheet from '../StyleSheet';\r\nimport TextInputState from '../../modules/TextInputState';\r\nimport UIManager from '../UIManager';\r\nimport View from '../View';\r\nimport React from 'react';\r\nimport warning from 'fbjs/lib/warning';\r\nvar emptyObject = {};\r\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\r\nclass ScrollView extends React.Component {\r\n  constructor() {\r\n    super(...arguments);\r\n    this._scrollNodeRef = null;\r\n    this._innerViewRef = null;\r\n    this.isTouching = false;\r\n    this.lastMomentumScrollBeginTime = 0;\r\n    this.lastMomentumScrollEndTime = 0;\r\n    this.observedScrollSinceBecomingResponder = false;\r\n    this.becameResponderWhileAnimating = false;\r\n    this.scrollResponderHandleScrollShouldSetResponder = () => {\r\n      return this.isTouching;\r\n    };\r\n    this.scrollResponderHandleStartShouldSetResponderCapture = e => {\r\n      // First see if we want to eat taps while the keyboard is up\r\n      // var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\r\n      // if (!this.props.keyboardShouldPersistTaps &&\r\n      //   currentlyFocusedTextInput != null &&\r\n      //   e.target !== currentlyFocusedTextInput) {\r\n      //   return true;\r\n      // }\r\n      return this.scrollResponderIsAnimating();\r\n    };\r\n    this.scrollResponderHandleTerminationRequest = () => {\r\n      return !this.observedScrollSinceBecomingResponder;\r\n    };\r\n    this.scrollResponderHandleTouchEnd = e => {\r\n      var nativeEvent = e.nativeEvent;\r\n      this.isTouching = nativeEvent.touches.length !== 0;\r\n      this.props.onTouchEnd && this.props.onTouchEnd(e);\r\n    };\r\n    this.scrollResponderHandleResponderRelease = e => {\r\n      this.props.onResponderRelease && this.props.onResponderRelease(e);\r\n\r\n      // By default scroll views will unfocus a textField\r\n      // if another touch occurs outside of it\r\n      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\r\n      if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.observedScrollSinceBecomingResponder && !this.becameResponderWhileAnimating) {\r\n        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\r\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\r\n      }\r\n    };\r\n    this.scrollResponderHandleScroll = e => {\r\n      this.observedScrollSinceBecomingResponder = true;\r\n      this.props.onScroll && this.props.onScroll(e);\r\n    };\r\n    this.scrollResponderHandleResponderGrant = e => {\r\n      this.observedScrollSinceBecomingResponder = false;\r\n      this.props.onResponderGrant && this.props.onResponderGrant(e);\r\n      this.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\r\n    };\r\n    this.scrollResponderHandleScrollBeginDrag = e => {\r\n      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\r\n    };\r\n    this.scrollResponderHandleScrollEndDrag = e => {\r\n      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\r\n    };\r\n    this.scrollResponderHandleMomentumScrollBegin = e => {\r\n      this.lastMomentumScrollBeginTime = Date.now();\r\n      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\r\n    };\r\n    this.scrollResponderHandleMomentumScrollEnd = e => {\r\n      this.lastMomentumScrollEndTime = Date.now();\r\n      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\r\n    };\r\n    this.scrollResponderHandleTouchStart = e => {\r\n      this.isTouching = true;\r\n      this.props.onTouchStart && this.props.onTouchStart(e);\r\n    };\r\n    this.scrollResponderHandleTouchMove = e => {\r\n      this.props.onTouchMove && this.props.onTouchMove(e);\r\n    };\r\n    this.scrollResponderIsAnimating = () => {\r\n      var now = Date.now();\r\n      var timeSinceLastMomentumScrollEnd = now - this.lastMomentumScrollEndTime;\r\n      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.lastMomentumScrollEndTime < this.lastMomentumScrollBeginTime;\r\n      return isAnimating;\r\n    };\r\n    this.scrollResponderScrollTo = (x, y, animated) => {\r\n      if (typeof x === 'number') {\r\n        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\r\n      } else {\r\n        var _ref = x || emptyObject;\r\n        x = _ref.x;\r\n        y = _ref.y;\r\n        animated = _ref.animated;\r\n      }\r\n      var node = this.getScrollableNode();\r\n      var left = x || 0;\r\n      var top = y || 0;\r\n      if (node != null) {\r\n        if (typeof node.scroll === 'function') {\r\n          node.scroll({\r\n            top,\r\n            left,\r\n            behavior: !animated ? 'auto' : 'smooth'\r\n          });\r\n        } else {\r\n          node.scrollLeft = left;\r\n          node.scrollTop = top;\r\n        }\r\n      }\r\n    };\r\n    this.scrollResponderZoomTo = (rect, animated) => {\r\n      if (Platform.OS !== 'ios') {\r\n        invariant('zoomToRect is not implemented');\r\n      }\r\n    };\r\n    this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset) => {\r\n      this.additionalScrollOffset = additionalOffset || 0;\r\n      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\r\n      UIManager.measureLayout(nodeHandle, this.getInnerViewNode(), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\r\n    };\r\n    this.scrollResponderInputMeasureAndScrollToKeyboard = (left, top, width, height) => {\r\n      var keyboardScreenY = Dimensions.get('window').height;\r\n      if (this.keyboardWillOpenTo) {\r\n        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\r\n      }\r\n      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\r\n\r\n      // By default, this can scroll with negative offset, pulling the content\r\n      // down so that the target component's bottom meets the keyboard's top.\r\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\r\n      // shifting down.\r\n      if (this.preventNegativeScrollOffset) {\r\n        scrollOffsetY = Math.max(0, scrollOffsetY);\r\n      }\r\n      this.scrollResponderScrollTo({\r\n        x: 0,\r\n        y: scrollOffsetY,\r\n        animated: true\r\n      });\r\n      this.additionalOffset = 0;\r\n      this.preventNegativeScrollOffset = false;\r\n    };\r\n    this.scrollResponderKeyboardWillShow = e => {\r\n      this.keyboardWillOpenTo = e;\r\n      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\r\n    };\r\n    this.scrollResponderKeyboardWillHide = e => {\r\n      this.keyboardWillOpenTo = null;\r\n      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\r\n    };\r\n    this.scrollResponderKeyboardDidShow = e => {\r\n      // TODO(7693961): The event for DidShow is not available on iOS yet.\r\n      // Use the one from WillShow and do not assign.\r\n      if (e) {\r\n        this.keyboardWillOpenTo = e;\r\n      }\r\n      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\r\n    };\r\n    this.scrollResponderKeyboardDidHide = e => {\r\n      this.keyboardWillOpenTo = null;\r\n      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\r\n    };\r\n    this.flashScrollIndicators = () => {\r\n      this.scrollResponderFlashScrollIndicators();\r\n    };\r\n    this.getScrollResponder = () => {\r\n      return this;\r\n    };\r\n    this.getScrollableNode = () => {\r\n      return this._scrollNodeRef;\r\n    };\r\n    this.getInnerViewRef = () => {\r\n      return this._innerViewRef;\r\n    };\r\n    this.getInnerViewNode = () => {\r\n      return this._innerViewRef;\r\n    };\r\n    this.getNativeScrollRef = () => {\r\n      return this._scrollNodeRef;\r\n    };\r\n    this.scrollTo = (y, x, animated) => {\r\n      if (typeof y === 'number') {\r\n        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.');\r\n      } else {\r\n        var _ref2 = y || emptyObject;\r\n        x = _ref2.x;\r\n        y = _ref2.y;\r\n        animated = _ref2.animated;\r\n      }\r\n      this.scrollResponderScrollTo({\r\n        x: x || 0,\r\n        y: y || 0,\r\n        animated: animated !== false\r\n      });\r\n    };\r\n    this.scrollToEnd = options => {\r\n      // Default to true\r\n      var animated = (options && options.animated) !== false;\r\n      var horizontal = this.props.horizontal;\r\n      var scrollResponderNode = this.getScrollableNode();\r\n      var x = horizontal ? scrollResponderNode.scrollWidth : 0;\r\n      var y = horizontal ? 0 : scrollResponderNode.scrollHeight;\r\n      this.scrollResponderScrollTo({\r\n        x,\r\n        y,\r\n        animated\r\n      });\r\n    };\r\n    this._handleContentOnLayout = e => {\r\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\r\n        width = _e$nativeEvent$layout.width,\r\n        height = _e$nativeEvent$layout.height;\r\n      this.props.onContentSizeChange(width, height);\r\n    };\r\n    this._handleScroll = e => {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (this.props.onScroll && this.props.scrollEventThrottle == null) {\r\n          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + \"cause frame drops, use a bigger number if you don't need as \" + 'much precision.');\r\n        }\r\n      }\r\n      if (this.props.keyboardDismissMode === 'on-drag') {\r\n        dismissKeyboard();\r\n      }\r\n      this.scrollResponderHandleScroll(e);\r\n    };\r\n    this._setInnerViewRef = node => {\r\n      this._innerViewRef = node;\r\n    };\r\n    this._setScrollNodeRef = node => {\r\n      this._scrollNodeRef = node;\r\n      // ScrollView needs to add more methods to the hostNode in addition to those\r\n      // added by `usePlatformMethods`. This is temporarily until an API like\r\n      // `ScrollView.scrollTo(hostNode, { x, y })` is added to React Native.\r\n      if (node != null) {\r\n        node.getScrollResponder = this.getScrollResponder;\r\n        node.getInnerViewNode = this.getInnerViewNode;\r\n        node.getInnerViewRef = this.getInnerViewRef;\r\n        node.getNativeScrollRef = this.getNativeScrollRef;\r\n        node.getScrollableNode = this.getScrollableNode;\r\n        node.scrollTo = this.scrollTo;\r\n        node.scrollToEnd = this.scrollToEnd;\r\n        node.flashScrollIndicators = this.flashScrollIndicators;\r\n        node.scrollResponderZoomTo = this.scrollResponderZoomTo;\r\n        node.scrollResponderScrollNativeHandleToKeyboard = this.scrollResponderScrollNativeHandleToKeyboard;\r\n      }\r\n      var ref = mergeRefs(this.props.forwardedRef);\r\n      ref(node);\r\n    };\r\n  }\r\n  /**\r\n   * Merely touch starting is not sufficient for a scroll view to become the\r\n   * responder. Being the \"responder\" means that the very next touch move/end\r\n   * event will result in an action/movement.\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponder` event.\r\n   *\r\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\r\n   * some UI movement/action, but when you want to yield priority to views\r\n   * nested inside of the view.\r\n   *\r\n   * There may be some cases where scroll views actually should return `true`\r\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\r\n   * that gives priority to nested views.\r\n   *\r\n   * - If a single tap on the scroll view triggers an action such as\r\n   *   recentering a map style view yet wants to give priority to interaction\r\n   *   views inside (such as dropped pins or labels), then we would return true\r\n   *   from this method when there is a single touch.\r\n   *\r\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\r\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\r\n   *   true.\r\n   *\r\n   */\r\n  scrollResponderHandleStartShouldSetResponder() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * There are times when the scroll view wants to become the responder\r\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\r\n   * that *doesn't* give priority to nested views (hence the capture phase):\r\n   *\r\n   * - Currently animating.\r\n   * - Tapping anywhere that is not the focused input, while the keyboard is\r\n   *   up (which should dismiss the keyboard).\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\r\n   */\r\n\r\n  /**\r\n   * Invoke this from an `onResponderReject` event.\r\n   *\r\n   * Some other element is not yielding its role as responder. Normally, we'd\r\n   * just disable the `UIScrollView`, but a touch has already began on it, the\r\n   * `UIScrollView` will not accept being disabled after that. The easiest\r\n   * solution for now is to accept the limitation of disallowing this\r\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\r\n   * a touch has already started.\r\n   */\r\n  scrollResponderHandleResponderReject() {\r\n    warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\r\n  }\r\n\r\n  /**\r\n   * We will allow the scroll view to give up its lock iff it acquired the lock\r\n   * during an animation. This is a very useful default that happens to satisfy\r\n   * many common user experiences.\r\n   *\r\n   * - Stop a scroll on the left edge, then turn that into an outer view's\r\n   *   backswipe.\r\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\r\n   *   view dismiss.\r\n   * - However, without catching the scroll view mid-bounce (while it is\r\n   *   motionless), if you drag far enough for the scroll view to become\r\n   *   responder (and therefore drag the scroll view a bit), any backswipe\r\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\r\n   *   rejected.\r\n   */\r\n\r\n  /**\r\n   * Displays the scroll indicators momentarily.\r\n   */\r\n  scrollResponderFlashScrollIndicators() {}\r\n\r\n  /**\r\n   * This method should be used as the callback to onFocus in a TextInputs'\r\n   * parent view. Note that any module using this mixin needs to return\r\n   * the parent view's ref in getScrollViewRef() in order to use this method.\r\n   * @param {any} nodeHandle The TextInput node handle\r\n   * @param {number} additionalOffset The scroll view's top \"contentInset\".\r\n   *        Default is 0.\r\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\r\n   *        down to make it meet the keyboard's top. Default is false.\r\n   */\r\n\r\n  scrollResponderTextInputFocusError(e) {\r\n    console.error('Error measuring text field: ', e);\r\n  }\r\n\r\n  /**\r\n   * Warning, this may be called several times for a single keyboard opening.\r\n   * It's best to store the information in this method and then take any action\r\n   * at a later point (either in `keyboardDidShow` or other).\r\n   *\r\n   * Here's the order that events occur in:\r\n   * - focus\r\n   * - willShow {startCoordinates, endCoordinates} several times\r\n   * - didShow several times\r\n   * - blur\r\n   * - willHide {startCoordinates, endCoordinates} several times\r\n   * - didHide several times\r\n   *\r\n   * The `ScrollResponder` providesModule callbacks for each of these events.\r\n   * Even though any user could have easily listened to keyboard events\r\n   * themselves, using these `props` callbacks ensures that ordering of events\r\n   * is consistent - and not dependent on the order that the keyboard events are\r\n   * subscribed to. This matters when telling the scroll view to scroll to where\r\n   * the keyboard is headed - the scroll responder better have been notified of\r\n   * the keyboard destination before being instructed to scroll to where the\r\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\r\n   * will work.\r\n   *\r\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\r\n   * different navigation pane. Filter out the events to determine if they are\r\n   * relevant to you. (For example, only if you receive these callbacks after\r\n   * you had explicitly focused a node etc).\r\n   */\r\n\r\n  render() {\r\n    var _this$props = this.props,\r\n      contentContainerStyle = _this$props.contentContainerStyle,\r\n      horizontal = _this$props.horizontal,\r\n      onContentSizeChange = _this$props.onContentSizeChange,\r\n      refreshControl = _this$props.refreshControl,\r\n      stickyHeaderIndices = _this$props.stickyHeaderIndices,\r\n      pagingEnabled = _this$props.pagingEnabled,\r\n      forwardedRef = _this$props.forwardedRef,\r\n      keyboardDismissMode = _this$props.keyboardDismissMode,\r\n      onScroll = _this$props.onScroll,\r\n      centerContent = _this$props.centerContent,\r\n      other = _objectWithoutPropertiesLoose(_this$props, _excluded);\r\n    if (process.env.NODE_ENV !== 'production' && this.props.style) {\r\n      var style = StyleSheet.flatten(this.props.style);\r\n      var childLayoutProps = ['alignItems', 'justifyContent'].filter(prop => style && style[prop] !== undefined);\r\n      invariant(childLayoutProps.length === 0, \"ScrollView child layout (\" + JSON.stringify(childLayoutProps) + \") \" + 'must be applied through the contentContainerStyle prop.');\r\n    }\r\n    var contentSizeChangeProps = {};\r\n    if (onContentSizeChange) {\r\n      contentSizeChangeProps = {\r\n        onLayout: this._handleContentOnLayout\r\n      };\r\n    }\r\n    var hasStickyHeaderIndices = !horizontal && Array.isArray(stickyHeaderIndices);\r\n    var children = hasStickyHeaderIndices || pagingEnabled ? React.Children.map(this.props.children, (child, i) => {\r\n      var isSticky = hasStickyHeaderIndices && stickyHeaderIndices.indexOf(i) > -1;\r\n      if (child != null && (isSticky || pagingEnabled)) {\r\n        return /*#__PURE__*/React.createElement(View, {\r\n          style: [isSticky && styles.stickyHeader, pagingEnabled && styles.pagingEnabledChild]\r\n        }, child);\r\n      } else {\r\n        return child;\r\n      }\r\n    }) : this.props.children;\r\n    var contentContainer = /*#__PURE__*/React.createElement(View, _extends({}, contentSizeChangeProps, {\r\n      children: children,\r\n      collapsable: false,\r\n      ref: this._setInnerViewRef,\r\n      style: [horizontal && styles.contentContainerHorizontal, centerContent && styles.contentContainerCenterContent, contentContainerStyle]\r\n    }));\r\n    var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\r\n    var pagingEnabledStyle = horizontal ? styles.pagingEnabledHorizontal : styles.pagingEnabledVertical;\r\n    var props = _objectSpread(_objectSpread({}, other), {}, {\r\n      style: [baseStyle, pagingEnabled && pagingEnabledStyle, this.props.style],\r\n      onTouchStart: this.scrollResponderHandleTouchStart,\r\n      onTouchMove: this.scrollResponderHandleTouchMove,\r\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\r\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\r\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\r\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\r\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\r\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\r\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\r\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\r\n      onScroll: this._handleScroll,\r\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\r\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\r\n      onResponderTerminate: this.scrollResponderHandleTerminate,\r\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\r\n      onResponderReject: this.scrollResponderHandleResponderReject\r\n    });\r\n    var ScrollViewClass = ScrollViewBase;\r\n    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');\r\n    var scrollView = /*#__PURE__*/React.createElement(ScrollViewClass, _extends({}, props, {\r\n      ref: this._setScrollNodeRef\r\n    }), contentContainer);\r\n    if (refreshControl) {\r\n      return /*#__PURE__*/React.cloneElement(refreshControl, {\r\n        style: props.style\r\n      }, scrollView);\r\n    }\r\n    return scrollView;\r\n  }\r\n}\r\nvar commonStyle = {\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n  // Enable hardware compositing in modern browsers.\r\n  // Creates a new layer with its own backing surface that can significantly\r\n  // improve scroll performance.\r\n  transform: 'translateZ(0)',\r\n  // iOS native scrolling\r\n  WebkitOverflowScrolling: 'touch'\r\n};\r\nvar styles = StyleSheet.create({\r\n  baseVertical: _objectSpread(_objectSpread({}, commonStyle), {}, {\r\n    flexDirection: 'column',\r\n    overflowX: 'hidden',\r\n    overflowY: 'auto'\r\n  }),\r\n  baseHorizontal: _objectSpread(_objectSpread({}, commonStyle), {}, {\r\n    flexDirection: 'row',\r\n    overflowX: 'auto',\r\n    overflowY: 'hidden'\r\n  }),\r\n  contentContainerHorizontal: {\r\n    flexDirection: 'row'\r\n  },\r\n  contentContainerCenterContent: {\r\n    justifyContent: 'center',\r\n    flexGrow: 1\r\n  },\r\n  stickyHeader: {\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 10\r\n  },\r\n  pagingEnabledHorizontal: {\r\n    scrollSnapType: 'x mandatory'\r\n  },\r\n  pagingEnabledVertical: {\r\n    scrollSnapType: 'y mandatory'\r\n  },\r\n  pagingEnabledChild: {\r\n    scrollSnapAlign: 'start'\r\n  }\r\n});\r\nvar ForwardedScrollView = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\r\n  return /*#__PURE__*/React.createElement(ScrollView, _extends({}, props, {\r\n    forwardedRef: forwardedRef\r\n  }));\r\n});\r\nForwardedScrollView.displayName = 'ScrollView';\r\nexport default ForwardedScrollView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}