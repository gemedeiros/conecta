{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nconst _excluded = [\"defaultStatus\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  let {\n      defaultStatus = 'closed'\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const router = TabRouter(rest);\n  const isDrawerInHistory = state => {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    });\n  };\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(it => it.type !== 'drawer')\n    });\n  };\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      });\n    },\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      });\n    },\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"names":["nanoid","TabRouter","TabActions","DrawerActions","_objectSpread","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","_objectWithoutProperties","_excluded","router","isDrawerInHistory","state","_state$history","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\routers\\src\\DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\n\r\nimport TabRouter, {\r\n  TabActionHelpers,\r\n  TabActions,\r\n  TabActionType,\r\n  TabNavigationState,\r\n  TabRouterOptions,\r\n} from './TabRouter';\r\nimport type {\r\n  CommonNavigationAction,\r\n  ParamListBase,\r\n  PartialState,\r\n  Router,\r\n} from './types';\r\nexport type DrawerStatus = 'open' | 'closed';\r\n\r\nexport type DrawerActionType =\r\n  | TabActionType\r\n  | {\r\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type DrawerRouterOptions = TabRouterOptions & {\r\n  defaultStatus?: DrawerStatus;\r\n};\r\n\r\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\r\n  TabNavigationState<ParamList>,\r\n  'type' | 'history'\r\n> & {\r\n  /**\r\n   * Type of the router, in this case, it's drawer.\r\n   */\r\n  type: 'drawer';\r\n  /**\r\n   * Default status of the drawer.\r\n   */\r\n  default: DrawerStatus;\r\n  /**\r\n   * List of previously visited route keys and drawer open status.\r\n   */\r\n  history: (\r\n    | { type: 'route'; key: string }\r\n    | { type: 'drawer'; status: DrawerStatus }\r\n  )[];\r\n};\r\n\r\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\r\n  TabActionHelpers<ParamList> & {\r\n    /**\r\n     * Open the drawer sidebar.\r\n     */\r\n    openDrawer(): void;\r\n\r\n    /**\r\n     * Close the drawer sidebar.\r\n     */\r\n    closeDrawer(): void;\r\n\r\n    /**\r\n     * Open the drawer sidebar if closed, or close if opened.\r\n     */\r\n    toggleDrawer(): void;\r\n  };\r\n\r\nexport const DrawerActions = {\r\n  ...TabActions,\r\n  openDrawer(): DrawerActionType {\r\n    return { type: 'OPEN_DRAWER' };\r\n  },\r\n  closeDrawer(): DrawerActionType {\r\n    return { type: 'CLOSE_DRAWER' };\r\n  },\r\n  toggleDrawer(): DrawerActionType {\r\n    return { type: 'TOGGLE_DRAWER' };\r\n  },\r\n};\r\n\r\nexport default function DrawerRouter({\r\n  defaultStatus = 'closed',\r\n  ...rest\r\n}: DrawerRouterOptions): Router<\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerActionType | CommonNavigationAction\r\n> {\r\n  const router = TabRouter(rest) as unknown as Router<\r\n    DrawerNavigationState<ParamListBase>,\r\n    TabActionType | CommonNavigationAction\r\n  >;\r\n\r\n  const isDrawerInHistory = (\r\n    state:\r\n      | DrawerNavigationState<ParamListBase>\r\n      | PartialState<DrawerNavigationState<ParamListBase>>\r\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\r\n\r\n  const addDrawerToHistory = (\r\n    state: DrawerNavigationState<ParamListBase>\r\n  ): DrawerNavigationState<ParamListBase> => {\r\n    if (isDrawerInHistory(state)) {\r\n      return state;\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      history: [\r\n        ...state.history,\r\n        {\r\n          type: 'drawer',\r\n          status: defaultStatus === 'open' ? 'closed' : 'open',\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const removeDrawerFromHistory = (\r\n    state: DrawerNavigationState<ParamListBase>\r\n  ): DrawerNavigationState<ParamListBase> => {\r\n    if (!isDrawerInHistory(state)) {\r\n      return state;\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      history: state.history.filter((it) => it.type !== 'drawer'),\r\n    };\r\n  };\r\n\r\n  const openDrawer = (\r\n    state: DrawerNavigationState<ParamListBase>\r\n  ): DrawerNavigationState<ParamListBase> => {\r\n    if (defaultStatus === 'open') {\r\n      return removeDrawerFromHistory(state);\r\n    }\r\n\r\n    return addDrawerToHistory(state);\r\n  };\r\n\r\n  const closeDrawer = (\r\n    state: DrawerNavigationState<ParamListBase>\r\n  ): DrawerNavigationState<ParamListBase> => {\r\n    if (defaultStatus === 'open') {\r\n      return addDrawerToHistory(state);\r\n    }\r\n\r\n    return removeDrawerFromHistory(state);\r\n  };\r\n\r\n  return {\r\n    ...router,\r\n\r\n    type: 'drawer',\r\n\r\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\r\n      const state = router.getInitialState({\r\n        routeNames,\r\n        routeParamList,\r\n        routeGetIdList,\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        default: defaultStatus,\r\n        stale: false,\r\n        type: 'drawer',\r\n        key: `drawer-${nanoid()}`,\r\n      };\r\n    },\r\n\r\n    getRehydratedState(\r\n      partialState,\r\n      { routeNames, routeParamList, routeGetIdList }\r\n    ) {\r\n      if (partialState.stale === false) {\r\n        return partialState;\r\n      }\r\n\r\n      let state = router.getRehydratedState(partialState, {\r\n        routeNames,\r\n        routeParamList,\r\n        routeGetIdList,\r\n      });\r\n\r\n      if (isDrawerInHistory(partialState)) {\r\n        // Re-sync the drawer entry in history to correct it if it was wrong\r\n        state = removeDrawerFromHistory(state);\r\n        state = addDrawerToHistory(state);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        default: defaultStatus,\r\n        type: 'drawer',\r\n        key: `drawer-${nanoid()}`,\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const result = router.getStateForRouteFocus(state, key);\r\n\r\n      return closeDrawer(result);\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      switch (action.type) {\r\n        case 'OPEN_DRAWER':\r\n          return openDrawer(state);\r\n\r\n        case 'CLOSE_DRAWER':\r\n          return closeDrawer(state);\r\n\r\n        case 'TOGGLE_DRAWER':\r\n          if (isDrawerInHistory(state)) {\r\n            return removeDrawerFromHistory(state);\r\n          }\r\n\r\n          return addDrawerToHistory(state);\r\n\r\n        case 'JUMP_TO':\r\n        case 'NAVIGATE': {\r\n          const result = router.getStateForAction(state, action, options);\r\n\r\n          if (result != null && result.index !== state.index) {\r\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\r\n          }\r\n\r\n          return result;\r\n        }\r\n\r\n        case 'GO_BACK':\r\n          if (isDrawerInHistory(state)) {\r\n            return removeDrawerFromHistory(state);\r\n          }\r\n\r\n          return router.getStateForAction(state, action, options);\r\n\r\n        default:\r\n          return router.getStateForAction(state, action, options);\r\n      }\r\n    },\r\n\r\n    actionCreators: DrawerActions,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}