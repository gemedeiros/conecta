{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport NativeStackView from '../views/NativeStackView';\nfunction NativeStackNavigator(_ref) {\n  let {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused();\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","NativeStackView","NativeStackNavigator","_ref","id","initialRouteName","children","screenListeners","screenOptions","rest","_objectWithoutProperties","_excluded","state","descriptors","navigation","NavigationContent","useEffect","_navigation$addListen","addListener","call","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","_objectSpread","popToTop","target","key","createElement","_extends"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\native-stack\\src\\navigators\\createNativeStackNavigator.tsx"],"sourcesContent":["import {\r\n  createNavigatorFactory,\r\n  EventArg,\r\n  ParamListBase,\r\n  StackActionHelpers,\r\n  StackActions,\r\n  StackNavigationState,\r\n  StackRouter,\r\n  StackRouterOptions,\r\n  useNavigationBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\n\r\nimport type {\r\n  NativeStackNavigationEventMap,\r\n  NativeStackNavigationOptions,\r\n  NativeStackNavigatorProps,\r\n} from '../types';\r\nimport NativeStackView from '../views/NativeStackView';\r\n\r\nfunction NativeStackNavigator({\r\n  id,\r\n  initialRouteName,\r\n  children,\r\n  screenListeners,\r\n  screenOptions,\r\n  ...rest\r\n}: NativeStackNavigatorProps) {\r\n  const { state, descriptors, navigation, NavigationContent } =\r\n    useNavigationBuilder<\r\n      StackNavigationState<ParamListBase>,\r\n      StackRouterOptions,\r\n      StackActionHelpers<ParamListBase>,\r\n      NativeStackNavigationOptions,\r\n      NativeStackNavigationEventMap\r\n    >(StackRouter, {\r\n      id,\r\n      initialRouteName,\r\n      children,\r\n      screenListeners,\r\n      screenOptions,\r\n    });\r\n\r\n  React.useEffect(\r\n    () =>\r\n      // @ts-expect-error: there may not be a tab navigator in parent\r\n      navigation?.addListener?.('tabPress', (e: any) => {\r\n        const isFocused = navigation.isFocused();\r\n\r\n        // Run the operation in the next frame so we're sure all listeners have been run\r\n        // This is necessary to know if preventDefault() has been called\r\n        requestAnimationFrame(() => {\r\n          if (\r\n            state.index > 0 &&\r\n            isFocused &&\r\n            !(e as EventArg<'tabPress', true>).defaultPrevented\r\n          ) {\r\n            // When user taps on already focused tab and we're inside the tab,\r\n            // reset the stack to replicate native behaviour\r\n            navigation.dispatch({\r\n              ...StackActions.popToTop(),\r\n              target: state.key,\r\n            });\r\n          }\r\n        });\r\n      }),\r\n    [navigation, state.index, state.key]\r\n  );\r\n\r\n  return (\r\n    <NavigationContent>\r\n      <NativeStackView\r\n        {...rest}\r\n        state={state}\r\n        navigation={navigation}\r\n        descriptors={descriptors}\r\n      />\r\n    </NavigationContent>\r\n  );\r\n}\r\n\r\nexport default createNavigatorFactory<\r\n  StackNavigationState<ParamListBase>,\r\n  NativeStackNavigationOptions,\r\n  NativeStackNavigationEventMap,\r\n  typeof NativeStackNavigator\r\n>(NativeStackNavigator);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,sBAAsB,EAItBC,YAAY,EAEZC,WAAW,EAEXC,oBAAoB,QACf,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAO9B,OAAOC,eAAe,MAAM,0BAA0B;AAEtD,SAASC,oBAAoBA,CAAAC,IAAA,EAOC;EAAA,IAPA;MAC5BC,EAAE;MACFC,gBAAgB;MAChBC,QAAQ;MACRC,eAAe;MACfC;IAEyB,CAAC,GAAAL,IAAA;IADvBM,IAAA,GAAAC,wBAAA,CACuBP,IAAA,EAAAQ,SAAA;EAC1B,MAAM;IAAEC,KAAK;IAAEC,WAAW;IAAEC,UAAU;IAAEC;EAAkB,CAAC,GACzDhB,oBAAoB,CAMlBD,WAAW,EAAE;IACbM,EAAE;IACFC,gBAAgB;IAChBC,QAAQ;IACRC,eAAe;IACfC;EACF,CAAC,CAAC;EAEJR,KAAK,CAACgB,SAAS,CACb;IAAA,IAAAC,qBAAA;IAAA,OAEEH,UAAU,aAAVA,UAAU,wBAAAG,qBAAA,GAAVH,UAAU,CAAEI,WAAW,cAAAD,qBAAA,uBAAvBA,qBAAA,CAAAE,IAAA,CAAAL,UAAU,EAAgB,UAAU,EAAGM,CAAM,IAAK;MAChD,MAAMC,SAAS,GAAGP,UAAU,CAACO,SAAS,EAAE;MAIxCC,qBAAqB,CAAC,MAAM;QAC1B,IACEV,KAAK,CAACW,KAAK,GAAG,CAAC,IACfF,SAAS,IACT,CAAED,CAAC,CAAgCI,gBAAgB,EACnD;UAGAV,UAAU,CAACW,QAAQ,CAAAC,aAAA,CAAAA,aAAA,KACd7B,YAAY,CAAC8B,QAAQ,EAAE;YAC1BC,MAAM,EAAEhB,KAAK,CAACiB;UAAA,EACf,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;EAAC,GACJ,CAACf,UAAU,EAAEF,KAAK,CAACW,KAAK,EAAEX,KAAK,CAACiB,GAAG,CAAC,CACrC;EAED,OACE7B,KAAA,CAAA8B,aAAA,CAACf,iBAAiB,QAChBf,KAAA,CAAA8B,aAAA,CAAC7B,eAAe,EAAA8B,QAAA,KACVtB,IAAI;IACRG,KAAK,EAAEA,KAAM;IACbE,UAAU,EAAEA,UAAW;IACvBD,WAAW,EAAEA;EAAY,GACzB,CACgB;AAExB;AAEA,eAAejB,sBAAsB,CAKnCM,oBAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}