{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    const match = configs.find(config => config.path === '' && config.routeNames.every(name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => _objectSpread(_objectSpread({}, c), {}, {\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","_configs$find","c","screen","result","current","remainingPath","matchAgainstConfigs","_objectSpread","regex","RegExp","source","joinPaths","_len","arguments","paths","Array","_key","p","_config$pattern","matchedParams","_config$path","params","value","_config$parse","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["C:\\Users\\thiago.attico\\source\\repos\\conecta\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\r\n  InitialState,\r\n  NavigationState,\r\n  PartialState,\r\n} from '@react-navigation/routers';\r\nimport escape from 'escape-string-regexp';\r\nimport * as queryString from 'query-string';\r\n\r\nimport findFocusedRoute from './findFocusedRoute';\r\nimport type { PathConfigMap } from './types';\r\nimport validatePathConfig from './validatePathConfig';\r\n\r\ntype Options<ParamList extends {}> = {\r\n  initialRouteName?: string;\r\n  screens: PathConfigMap<ParamList>;\r\n};\r\n\r\ntype ParseConfig = Record<string, (value: string) => any>;\r\n\r\ntype RouteConfig = {\r\n  screen: string;\r\n  regex?: RegExp;\r\n  path: string;\r\n  pattern: string;\r\n  routeNames: string[];\r\n  parse?: ParseConfig;\r\n};\r\n\r\ntype InitialRouteConfig = {\r\n  initialRouteName: string;\r\n  parentScreens: string[];\r\n};\r\n\r\ntype ResultState = PartialState<NavigationState> & {\r\n  state?: ResultState;\r\n};\r\n\r\ntype ParsedRoute = {\r\n  name: string;\r\n  path?: string;\r\n  params?: Record<string, any> | undefined;\r\n};\r\n\r\n/**\r\n * Utility to parse a path string to initial state object accepted by the container.\r\n * This is useful for deep linking when we need to handle the incoming URL.\r\n *\r\n * @example\r\n * ```js\r\n * getStateFromPath(\r\n *   '/chat/jane/42',\r\n *   {\r\n *     screens: {\r\n *       Chat: {\r\n *         path: 'chat/:author/:id',\r\n *         parse: { id: Number }\r\n *       }\r\n *     }\r\n *   }\r\n * )\r\n * ```\r\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\r\n * @param options Extra options to fine-tune how to parse the path.\r\n */\r\nexport default function getStateFromPath<ParamList extends {}>(\r\n  path: string,\r\n  options?: Options<ParamList>\r\n): ResultState | undefined {\r\n  if (options) {\r\n    validatePathConfig(options);\r\n  }\r\n\r\n  let initialRoutes: InitialRouteConfig[] = [];\r\n\r\n  if (options?.initialRouteName) {\r\n    initialRoutes.push({\r\n      initialRouteName: options.initialRouteName,\r\n      parentScreens: [],\r\n    });\r\n  }\r\n\r\n  const screens = options?.screens;\r\n\r\n  let remaining = path\r\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\r\n    .replace(/^\\//, '') // Remove extra leading slash\r\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\r\n\r\n  // Make sure there is a trailing slash\r\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\r\n\r\n  if (screens === undefined) {\r\n    // When no config is specified, use the path segments as route names\r\n    const routes = remaining\r\n      .split('/')\r\n      .filter(Boolean)\r\n      .map((segment) => {\r\n        const name = decodeURIComponent(segment);\r\n        return { name };\r\n      });\r\n\r\n    if (routes.length) {\r\n      return createNestedStateObject(path, routes, initialRoutes);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  // Create a normalized configs array which will be easier to use\r\n  const configs = ([] as RouteConfig[])\r\n    .concat(\r\n      ...Object.keys(screens).map((key) =>\r\n        createNormalizedConfigs(\r\n          key,\r\n          screens as PathConfigMap<object>,\r\n          [],\r\n          initialRoutes,\r\n          []\r\n        )\r\n      )\r\n    )\r\n    .sort((a, b) => {\r\n      // Sort config so that:\r\n      // - the most exhaustive ones are always at the beginning\r\n      // - patterns with wildcard are always at the end\r\n\r\n      // If 2 patterns are same, move the one with less route names up\r\n      // This is an error state, so it's only useful for consistent error messages\r\n      if (a.pattern === b.pattern) {\r\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\r\n      }\r\n\r\n      // If one of the patterns starts with the other, it's more exhaustive\r\n      // So move it up\r\n      if (a.pattern.startsWith(b.pattern)) {\r\n        return -1;\r\n      }\r\n\r\n      if (b.pattern.startsWith(a.pattern)) {\r\n        return 1;\r\n      }\r\n\r\n      const aParts = a.pattern.split('/');\r\n      const bParts = b.pattern.split('/');\r\n\r\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\r\n        // if b is longer, b get higher priority\r\n        if (aParts[i] == null) {\r\n          return 1;\r\n        }\r\n        // if a is longer, a get higher priority\r\n        if (bParts[i] == null) {\r\n          return -1;\r\n        }\r\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\r\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\r\n        // if both are wildcard we compare next component\r\n        if (aWildCard && bWildCard) {\r\n          continue;\r\n        }\r\n        // if only a is wild card, b get higher priority\r\n        if (aWildCard) {\r\n          return 1;\r\n        }\r\n        // if only b is wild card, a get higher priority\r\n        if (bWildCard) {\r\n          return -1;\r\n        }\r\n      }\r\n      return bParts.length - aParts.length;\r\n    });\r\n\r\n  // Check for duplicate patterns in the config\r\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\r\n    if (acc[config.pattern]) {\r\n      const a = acc[config.pattern].routeNames;\r\n      const b = config.routeNames;\r\n\r\n      // It's not a problem if the path string omitted from a inner most screen\r\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\r\n      const intersects =\r\n        a.length > b.length\r\n          ? b.every((it, i) => a[i] === it)\r\n          : a.every((it, i) => b[i] === it);\r\n\r\n      if (!intersects) {\r\n        throw new Error(\r\n          `Found conflicting screens with the same pattern. The pattern '${\r\n            config.pattern\r\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\r\n            ' > '\r\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return Object.assign(acc, {\r\n      [config.pattern]: config,\r\n    });\r\n  }, {});\r\n\r\n  if (remaining === '/') {\r\n    // We need to add special handling of empty path so navigation to empty path also works\r\n    // When handling empty path, we should only look at the root level config\r\n    const match = configs.find(\r\n      (config) =>\r\n        config.path === '' &&\r\n        config.routeNames.every(\r\n          // Make sure that none of the parent configs have a non-empty path defined\r\n          (name) => !configs.find((c) => c.screen === name)?.path\r\n        )\r\n    );\r\n\r\n    if (match) {\r\n      return createNestedStateObject(\r\n        path,\r\n        match.routeNames.map((name) => ({ name })),\r\n        initialRoutes,\r\n        configs\r\n      );\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  let result: PartialState<NavigationState> | undefined;\r\n  let current: PartialState<NavigationState> | undefined;\r\n\r\n  // We match the whole path against the regex instead of segments\r\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\r\n  const { routes, remainingPath } = matchAgainstConfigs(\r\n    remaining,\r\n    configs.map((c) => ({\r\n      ...c,\r\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\r\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\r\n    }))\r\n  );\r\n\r\n  if (routes !== undefined) {\r\n    // This will always be empty if full path matched\r\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\r\n    remaining = remainingPath;\r\n    result = current;\r\n  }\r\n\r\n  if (current == null || result == null) {\r\n    return undefined;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst joinPaths = (...paths: string[]): string =>\r\n  ([] as string[])\r\n    .concat(...paths.map((p) => p.split('/')))\r\n    .filter(Boolean)\r\n    .join('/');\r\n\r\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\r\n  let routes: ParsedRoute[] | undefined;\r\n  let remainingPath = remaining;\r\n\r\n  // Go through all configs, and see if the next path segment matches our regex\r\n  for (const config of configs) {\r\n    if (!config.regex) {\r\n      continue;\r\n    }\r\n\r\n    const match = remainingPath.match(config.regex);\r\n\r\n    // If our regex matches, we need to extract params from the path\r\n    if (match) {\r\n      const matchedParams = config.pattern\r\n        ?.split('/')\r\n        .filter((p) => p.startsWith(':'))\r\n        .reduce<Record<string, any>>(\r\n          (acc, p, i) =>\r\n            Object.assign(acc, {\r\n              // The param segments appear every second item starting from 2 in the regex match result\r\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\r\n            }),\r\n          {}\r\n        );\r\n\r\n      routes = config.routeNames.map((name) => {\r\n        const config = configs.find((c) => c.screen === name);\r\n        const params = config?.path\r\n          ?.split('/')\r\n          .filter((p) => p.startsWith(':'))\r\n          .reduce<Record<string, any>>((acc, p) => {\r\n            const value = matchedParams[p];\r\n\r\n            if (value) {\r\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\r\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\r\n            }\r\n\r\n            return acc;\r\n          }, {});\r\n\r\n        if (params && Object.keys(params).length) {\r\n          return { name, params };\r\n        }\r\n\r\n        return { name };\r\n      });\r\n\r\n      remainingPath = remainingPath.replace(match[1], '');\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  return { routes, remainingPath };\r\n};\r\n\r\nconst createNormalizedConfigs = (\r\n  screen: string,\r\n  routeConfig: PathConfigMap<object>,\r\n  routeNames: string[] = [],\r\n  initials: InitialRouteConfig[],\r\n  parentScreens: string[],\r\n  parentPattern?: string\r\n): RouteConfig[] => {\r\n  const configs: RouteConfig[] = [];\r\n\r\n  routeNames.push(screen);\r\n\r\n  parentScreens.push(screen);\r\n\r\n  // @ts-expect-error: we can't strongly typecheck this for now\r\n  const config = routeConfig[screen];\r\n\r\n  if (typeof config === 'string') {\r\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\r\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\r\n\r\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\r\n  } else if (typeof config === 'object') {\r\n    let pattern: string | undefined;\r\n\r\n    // if an object is specified as the value (e.g. Foo: { ... }),\r\n    // it can have `path` property and\r\n    // it could have `screens` prop which has nested configs\r\n    if (typeof config.path === 'string') {\r\n      if (config.exact && config.path === undefined) {\r\n        throw new Error(\r\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\r\n        );\r\n      }\r\n\r\n      pattern =\r\n        config.exact !== true\r\n          ? joinPaths(parentPattern || '', config.path || '')\r\n          : config.path || '';\r\n\r\n      configs.push(\r\n        createConfigItem(\r\n          screen,\r\n          routeNames,\r\n          pattern!,\r\n          config.path,\r\n          config.parse\r\n        )\r\n      );\r\n    }\r\n\r\n    if (config.screens) {\r\n      // property `initialRouteName` without `screens` has no purpose\r\n      if (config.initialRouteName) {\r\n        initials.push({\r\n          initialRouteName: config.initialRouteName,\r\n          parentScreens,\r\n        });\r\n      }\r\n\r\n      Object.keys(config.screens).forEach((nestedConfig) => {\r\n        const result = createNormalizedConfigs(\r\n          nestedConfig,\r\n          config.screens as PathConfigMap<object>,\r\n          routeNames,\r\n          initials,\r\n          [...parentScreens],\r\n          pattern ?? parentPattern\r\n        );\r\n\r\n        configs.push(...result);\r\n      });\r\n    }\r\n  }\r\n\r\n  routeNames.pop();\r\n\r\n  return configs;\r\n};\r\n\r\nconst createConfigItem = (\r\n  screen: string,\r\n  routeNames: string[],\r\n  pattern: string,\r\n  path: string,\r\n  parse?: ParseConfig\r\n): RouteConfig => {\r\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\r\n  pattern = pattern.split('/').filter(Boolean).join('/');\r\n\r\n  const regex = pattern\r\n    ? new RegExp(\r\n        `^(${pattern\r\n          .split('/')\r\n          .map((it) => {\r\n            if (it.startsWith(':')) {\r\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\r\n            }\r\n\r\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\r\n          })\r\n          .join('')})`\r\n      )\r\n    : undefined;\r\n\r\n  return {\r\n    screen,\r\n    regex,\r\n    pattern,\r\n    path,\r\n    // The routeNames array is mutated, so copy it to keep the current state\r\n    routeNames: [...routeNames],\r\n    parse,\r\n  };\r\n};\r\n\r\nconst findParseConfigForRoute = (\r\n  routeName: string,\r\n  flatConfig: RouteConfig[]\r\n): ParseConfig | undefined => {\r\n  for (const config of flatConfig) {\r\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\r\n      return config.parse;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n// Try to find an initial route connected with the one passed\r\nconst findInitialRoute = (\r\n  routeName: string,\r\n  parentScreens: string[],\r\n  initialRoutes: InitialRouteConfig[]\r\n): string | undefined => {\r\n  for (const config of initialRoutes) {\r\n    if (parentScreens.length === config.parentScreens.length) {\r\n      let sameParents = true;\r\n      for (let i = 0; i < parentScreens.length; i++) {\r\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\r\n          sameParents = false;\r\n          break;\r\n        }\r\n      }\r\n      if (sameParents) {\r\n        return routeName !== config.initialRouteName\r\n          ? config.initialRouteName\r\n          : undefined;\r\n      }\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\n// returns state object with values depending on whether\r\n// it is the end of state and if there is initialRoute for this level\r\nconst createStateObject = (\r\n  initialRoute: string | undefined,\r\n  route: ParsedRoute,\r\n  isEmpty: boolean\r\n): InitialState => {\r\n  if (isEmpty) {\r\n    if (initialRoute) {\r\n      return {\r\n        index: 1,\r\n        routes: [{ name: initialRoute }, route],\r\n      };\r\n    } else {\r\n      return {\r\n        routes: [route],\r\n      };\r\n    }\r\n  } else {\r\n    if (initialRoute) {\r\n      return {\r\n        index: 1,\r\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\r\n      };\r\n    } else {\r\n      return {\r\n        routes: [{ ...route, state: { routes: [] } }],\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst createNestedStateObject = (\r\n  path: string,\r\n  routes: ParsedRoute[],\r\n  initialRoutes: InitialRouteConfig[],\r\n  flatConfig?: RouteConfig[]\r\n) => {\r\n  let state: InitialState;\r\n  let route = routes.shift() as ParsedRoute;\r\n  const parentScreens: string[] = [];\r\n\r\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\r\n\r\n  parentScreens.push(route.name);\r\n\r\n  state = createStateObject(initialRoute, route, routes.length === 0);\r\n\r\n  if (routes.length > 0) {\r\n    let nestedState = state;\r\n\r\n    while ((route = routes.shift() as ParsedRoute)) {\r\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\r\n\r\n      const nestedStateIndex =\r\n        nestedState.index || nestedState.routes.length - 1;\r\n\r\n      nestedState.routes[nestedStateIndex].state = createStateObject(\r\n        initialRoute,\r\n        route,\r\n        routes.length === 0\r\n      );\r\n\r\n      if (routes.length > 0) {\r\n        nestedState = nestedState.routes[nestedStateIndex]\r\n          .state as InitialState;\r\n      }\r\n\r\n      parentScreens.push(route.name);\r\n    }\r\n  }\r\n\r\n  route = findFocusedRoute(state) as ParsedRoute;\r\n  route.path = path;\r\n\r\n  const params = parseQueryParams(\r\n    path,\r\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\r\n  );\r\n\r\n  if (params) {\r\n    route.params = { ...route.params, ...params };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst parseQueryParams = (\r\n  path: string,\r\n  parseConfig?: Record<string, (value: string) => any>\r\n) => {\r\n  const query = path.split('?')[1];\r\n  const params = queryString.parse(query);\r\n\r\n  if (parseConfig) {\r\n    Object.keys(params).forEach((name) => {\r\n      if (\r\n        Object.hasOwnProperty.call(parseConfig, name) &&\r\n        typeof params[name] === 'string'\r\n      ) {\r\n        params[name] = parseConfig[name](params[name] as string);\r\n      }\r\n    });\r\n  }\r\n\r\n  return Object.keys(params).length ? params : undefined;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}